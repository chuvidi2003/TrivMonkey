<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Scoreloop.CoreSocial</name>
  </assembly>
  <members>
    <member name="T:Scoreloop.CoreSocial.API.IEventDispatcher">
      <summary>
            Interface defining common way of dispatching events between threads.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IEventDispatcher.Invoke(Scoreloop.CoreSocial.API.ActionCallback)">
      <summary>
            Invokes given action on a thread owned by underlying dispatcher.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IEventDispatcher.Invoke``1(``0,System.Action{``0})">
      <summary>
            Invoke given action on a thread owned by underlying dispatcher, passing single argument.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IEventDispatcher.Invoke``1(System.EventHandler{``0},System.Object,``0)">
      <summary>
            Invoke an event on a thread owned by underlying dispatcher.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ActionCallback">
      <summary>
            Delegate to function without arguments.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Range">
      <summary>
            Class that stores info about given range.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.Range.Zero">
      <summary>
            Gets the starting from zero and with zero length range.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.#ctor(System.Int32,System.UInt32)">
      <summary>
            Init constructor.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.#ctor(System.Int64,System.UInt32)">
      <summary>
            Init constructor.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.Contains(System.Int32)">
      <summary>
            Checks if given value belongs to the range.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.Contains(System.UInt32)">
      <summary>
            Checks if given value belongs to the range.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.Contains(System.Int64)">
      <summary>
            Checks if given value belongs to the range.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.ToString">
      <summary>
            Gets the string representation of the object.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.ToString(System.String)">
      <summary>
            Gets the string representation of the object for given format.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.ToString(System.String,System.IFormatProvider)">
      <summary>
            Gets the string representation of the object for given format.
            Acceptable values: 
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.Equals(System.Object)">
      <summary>
            Compares current Range to given object.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.op_Equality(Scoreloop.CoreSocial.API.Model.Range,Scoreloop.CoreSocial.API.Model.Range)">
      <summary>
            Compare for equality.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.op_Inequality(Scoreloop.CoreSocial.API.Model.Range,Scoreloop.CoreSocial.API.Model.Range)">
      <summary>
            Compare for inequality.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.Equals(Scoreloop.CoreSocial.API.Model.Range)">
      <summary>
            Verifies if given Range is equal to current one.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.GetHashCode">
      <summary>
            Gets the hash value for this object.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.Parse(System.String)">
      <summary>
            Parses the text to a range object. It tries all known formats.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Range.TryParse(System.String,Scoreloop.CoreSocial.API.Model.Range@)">
      <summary>
            Tries to parse value from any known format.
            If succeeds, then returned is 'true' and 'value' contains the parsed range.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Range.Location">
      <summary>
            Gets the start location of the range.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Range.Length">
      <summary>
            Gets the length of the range.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Range.LeftBound">
      <summary>
            Gets the smaller bound value.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Range.RightBound">
      <summary>
            Gets the bigger bound value.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ConfigurationBuilder">
      <summary>
            Class wrapping settings all configuration options of ScoreloopClient.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ConfigurationBuilder.XnaGameObject">
      <summary>
            Name of the platform-specific option to set a XNA object in context of which the Scoreloop UI  will be invoked.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ConfigurationBuilder.SilverlightPhoneApplicationFrame">
      <summary>
            Name of the platform-specific option to set a Silverlight PhoneApplicationPage object in context of which the Scoreloop UI will be invoked.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ConfigurationBuilder.AutodetectCultures">
      <summary>
            Name of the option that defines an array of strings with names of the cultures that are tried to load,
            automatic awards bundle localizations are loaded.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.#ctor(System.String,System.Version,System.String,System.String,System.String)">
      <summary>
            Constructor that binds configuration to given game.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.#ctor(System.String,System.Version,System.String,System.String,System.String,System.Globalization.CultureInfo)">
      <summary>
            Constructor that binds configuration to given game.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.#ctor(System.String)">
      <summary>
            Constructor that setups the configuration based on a specified *.strings -file definition.
            Expected are only fields defining game properties 'game.*'. They contain the basic info, normally passed via SetGame() call.
            
            "game.name"="My Game";
            "game.id"="xxx";
            "game.secret"="xxx";
            "game.version"="1.0";
            "game.currency"="SLD";
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetGame(System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
      <summary>
            Sets definition of given game.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetGame(System.String,System.Version,System.String,System.String,System.String)">
      <summary>
            Sets definition of given game.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetGame(System.String,System.Version,System.String,System.String,System.String,System.UInt32)">
      <summary>
            Sets definition of given game.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetGame(System.String,System.Version,System.String,System.String,System.String,System.UInt32,System.Globalization.CultureInfo)">
      <summary>
            Sets definition of given game.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetDescription(System.String)">
      <summary>
            Sets the game's description.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetPublisher(System.String,System.String,System.String)">
      <summary>
            Sets the game's publisher info.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetPublisher(System.String,System.Uri,System.String)">
      <summary>
            Sets the game's publisher info.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetTimeout(System.Int32)">
      <summary>
            This method is used to define a request timeout for further ScoreloopClient instance.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.CreateResourceUri(System.String)">
      <summary>
            Creates and Uri location for given resource.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.CreateResourceUri(System.String,System.Reflection.Assembly)">
      <summary>
            Creates and Uri location for given resource.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetScoreFormatterContent(System.String)">
      <summary>
            Sets the content for game's score-formatter.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetScoreFormatterContent(System.IO.Stream)">
      <summary>
            Sets the content for game's score-formatter.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetScoreFormatterContentSource(System.String)">
      <summary>
            Sets given embedded resource content as a data for ScoreFormatter.
            Resource comes from currently executing assembly.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetScoreFormatterContentSource(System.String,System.Reflection.Assembly)">
      <summary>
            Sets given embedded-resource content as a data for ScoreFormatter.
            Resource comes from specified assembly.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetScoreFormatterContentSource(System.Uri)">
      <summary>
            Sets given content-resource's content as data for ScoreFomatter.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetOption(System.String,System.Object)">
      <summary>
            Sets a platform specific option.
            If current platform is invalid, passed value will be ignored.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetOption(System.String,System.Object,System.Boolean)">
      <summary>
            Sets a platform specific option.
            If current platform is invalid, passed value will be ignored.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.GetOption``1(System.String,``0)">
      <summary>
            Gets the platform-specific option value.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.ClearSessionPersistentStorage">
      <summary>
            Removes data from persistent storage, what will cause a fresh ScoreloopClient to be created.
            Otherwise some stored data might be used (as support for tombstoning is enabled by default).
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.ClearAchievementsStorage">
      <summary>
            Removes data from persistent storage related to achievements.
            This will cause all user-progress not submitted to Scoreloop to be removed and there won't be any
            way to recover it.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.ClearGameItemsStorage">
      <summary>
            Removes data from persistent storage related to game items.
            This will clear the info about locally stored game-items, so all of them must be redownloaded from Scoreloop servers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.ClearPaymentsStorage">
      <summary>
            Removes data from persistent storage related to incompleted payments.
            This will clear the info about locally stored incompleted payments, so all client-side state monitoring and "restarting" in case of failures becomes impossible.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.ClearNewsStorage">
      <summary>
            Removes data from persistent storage related to already read news.
            This will clear the info and since now on, all the news are treated as unread.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.ClearFailedScores">
      <summary>
            Removes data from persistent storage related to recent score submissions that failed.
            This will clear the info and since now on, there is no additional info to submit while performing first session authentication.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsContent(System.String,System.String)">
      <summary>
            Sets the definitions of the awards definition.
            This is the content of the Info.plist (or Info.json) and Info.plist.checksum (null if Info.json given).
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsContent(System.IO.Stream,System.IO.Stream)">
      <summary>
            Sets the definitions of the awards definition.
            This is the content of the Info.plist (or Info.json) and Info.plist.checksum (null if Info.json given).
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsSource(System.String,System.String,System.Reflection.Assembly)">
      <summary>
            Reads award definition content from assembly embedded-resources.
            This can be the content of the Info.plist (or Info.json) and Info.plist.checksum (null if Info.json given).
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsSource(System.Uri,System.Uri)">
      <summary>
            Reads award definition content from content-resources.
            This can be the content of the Info.plist (or Info.json) and Info.plist.checksum (null if Info.json given).
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsSource(System.String,System.String)">
      <summary>
            Reads award definition content from assembly embedded-resources.
            This can be the content of the Info.plist (or Info.json) and Info.plist.checksum (null if Info.json given).
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsLocalization(System.Boolean,System.String,System.String)">
      <summary>
            Loads the awards localization descriptions and titles. The content is given directly as last parameter passed to this method.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsLocalization(System.Boolean,System.String,System.IO.Stream)">
      <summary>
            Loads the awards localization descriptions and titles. The content is given directly as last parameter passed to this method.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsLocalizationSource(System.String,System.String,System.Reflection.Assembly,System.Boolean)">
      <summary>
            Loads the awards localization descriptions and titles. The content will be read as an embedded-resource from given assembly.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsLocalizationSource(System.String,System.String,System.Boolean)">
      <summary>
            Loads the awards localization descriptions and titles. The content will be read as an embedded-resource from current assembly.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsLocalizationSource(System.String,System.String)">
      <summary>
            Loads the awards localization descriptions and titles. The content will be read as an embedded-resource from current assembly.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetDefaultAwardsLocalization(System.String)">
      <summary>
            Sets the default language for awards localization descriptions.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsLocalizationSource(System.String,System.Uri,System.Boolean)">
      <summary>
            Loads the awards localization descriptions and titles. The content will be read as a content-resource from current assembly.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsLocalizationSource(System.String,System.Uri)">
      <summary>
            Loads the awards localization descriptions and titles. The content will be read as a content-resource from current assembly.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsBundle(System.String)">
      <summary>
            Loads description of awards bundle from current assembly. All resources must be marked as 'embedded-resources'.
            If this was of loading is not suitable, use the 'SetAwardsXXSource' to specify all parameters manually.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsBundle(System.String,System.String)">
      <summary>
            Loads description of awards bundle from current assembly. All resources must be marked as 'embedded-resources'.
            If this was of loading is not suitable, use the 'SetAwardsXXXSource' to specify all parameters manually.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.Initialize">
      <summary>
            Initialize platform-specific constants.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsBundle(System.String,System.Reflection.Assembly,System.String)">
      <summary>
            Loads description of awards bundle from specified assembly. All resources must be marked as 'embedded resources'.
            If this type of loading is not suitable, use the 'SetAwardsXXXSource' to specify all parameters manually.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsBundle(System.Uri)">
      <summary>
            Imports award definitions from given bundle provided as a Silverlight resource.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetAwardsBundle(System.Uri,System.String)">
      <summary>
            Imports award definitions from given bundle provided as a Silverlight resource.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetDispatcher(Scoreloop.CoreSocial.API.IEventDispatcher)">
      <summary>
            Sets the thread-synchronization dispatcher for event callback calls on this ScoreloopClient and all its controllers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetDispatcher(System.Windows.DependencyObject)">
      <summary>
            Sets the thread-synchronization dispatcher for event callback calls on this ScoreloopClient and all its controllers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.SetDispatcher(System.Windows.Threading.Dispatcher)">
      <summary>
            Sets the thread-synchronization dispatcher for event callback calls on this ScoreloopClient and all its controllers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ConfigurationBuilder.ToString">
      <summary>
            Gets the string representation of this object.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ConfigurationBuilder.Timeout">
      <summary>
            This method is used to define a request timeout for further ScoreloopClient instance.
            </summary>
      <returns>The request timeout that is currently set.</returns>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Constants">
      <summary>
            This class encapsulates all common values used across the whole SDK.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Constants.InvalidMode">
      <summary>
            Gets the value of invalid mode. Passing this value for many API methods will cause the mode value to be ignored.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Constants.InvalidRank">
      <summary>
            Gets the value of invalid rank.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Constants.DefaultRangeLength">
      <summary>
            Gets the default value of range length.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Constants.MaxMode">
      <summary>
            Gets the maximum value of mode.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Constants.MaxLevel">
      <summary>
            Gets the maximum value of level.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Constants.MaxResult">
      <summary>
            Gets the maximum value of result.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Constants.MinResult">
      <summary>
            Gets the minimal value of the result.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.UserUpdateDetailsMask">
      <summary>
            Mask values for the integer returned as ErrorDetail in <seealso cref="T:Scoreloop.CoreSocial.API.ScoreloopError" /> when user info update fails.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.UserUpdateDetailsMask.EmailTaken">
      <summary>
            The email address is already used by another user.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.UserUpdateDetailsMask.EmailInvalid">
      <summary>
            The email submitted seems to be not an email address.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.UserUpdateDetailsMask.NameTaken">
      <summary>
            The name is already used by another user.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.UserUpdateDetailsMask.NameInvalid">
      <summary>
            The name is in an format not allowed by Scoreloop.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.UserUpdateDetailsMask.NameTooShort">
      <summary>
            The name is too short.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.UserUpdateDetailsMask.ImageTooLarge">
      <summary>
            The user image is too large.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.UserUpdateDetailsMask.UnsupportedMimeType">
      <summary>
            Update request contained unsupported mime-type.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.UserUpdateDetailsMask.NameTooLong">
      <summary>
            The name is too long.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.UserUpdateDetailsMask.NameInappropriate">
      <summary>
            The name is inappropriate or offensive.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.SocialProviderErrorDetailsMask">
      <summary>
            Mask values for the integer returned as ErrorDetail in <seealso cref="T:Scoreloop.CoreSocial.API.ScoreloopError" /> when social-network operation fails.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.SocialProviderErrorDetailsMask.Facebook">
      <summary>
            Facebook is disconnected.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.SocialProviderErrorDetailsMask.Twitter">
      <summary>
            Twitter is disconnected.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ErrorCode">
      <summary>
            Enumerates the different types of error codes
            that may be encountered. The error code is returned
            as one of the properties of a <see cref="T:Scoreloop.CoreSocial.API.ScoreloopError" /> object.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.Undefined">
      <summary>
            An unknown error description.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.WizardIncomplete">
      <summary>
            User rejected the Scoreloop Wizard on BB10 platforms.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ClientInternalError">
      <summary>
            Exception found in Scoreloop .NET SDK client.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.MandatoryInvalidArguments">
      <summary>
            Invalid arguments passed.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.MandatoryParamMissing">
      <summary>
            A mandatory parameter is missing.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.MandatoryParamOfWrongType">
      <summary>
            The server expected a mandatory parameter with different type.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.MandatoryParamValueNotAllowed">
      <summary>
            The value assigned to a mandatory parameter is not allowed.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.MandatoryParamTypeMissing">
      <summary>
            An object of expected type is missing.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.OptionalObjectMissingAlthoughParamterGiven">
      <summary>
            An optional object is not of the expected type.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationInvalidArguments">
      <summary>
            Registration not completed.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationInvalidUserOrPassword">
      <summary>
            Invalid user or password passed during registration.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationIncomplete">
      <summary>
            Registration is not completed, so cannot authenticate with password.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationFailed">
      <summary>
            Failed to create new user for device.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationParamterMissing">
      <summary>
            Mandatory parameters are missing for registration.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationDeviceMissing">
      <summary>
            Device is missing or invalid.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationDeviceBelongsNotToUser">
      <summary>
            Device does not belong to user.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationDeviceIsReset">
      <summary>
            Device is in the state 'reset'.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationDeviceIsBanned">
      <summary>
            Device is in the state 'banned'.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationDeviceBelongsNotToFacebookUser">
      <summary>
            Device does not belong to user linked to Facebook UID.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.RegistrationFacebookLoginDeactivated">
      <summary>
            Login via Facebook UID is deactivated.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeInvalidArguments">
      <summary>
            Invalid arguments passed with challenge.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeUpdateInvalidArguments">
      <summary>
            Invalid arguments passed with an update challenge request.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeUpdateAlreadyAssigned">
      <summary>
            Challenge already assigned to a different user.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeCannotAssignYourself">
      <summary>
            Can not challenge self.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeInsufficientFunds">
      <summary>
            User does not have enough money to create the challenge.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeGameLevelMismatch">
      <summary>
            OT CHECKED The score does not match the game level of the challenge.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeUpdateGameLevelMismatch">
      <summary>
            OT CHECKED  The score does not match the game level of the challenge.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeAlreadyAssignedYourself">
      <summary>
            Challenge already assigned to yourself.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeCannotAccept">
      <summary>
            Client side: cannot accept challenge (<see cref="T:Scoreloop.CoreSocial.API.IChallengeController" />). It might be already accepted, rejected or completed.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeCannotReject">
      <summary>
            Client side: cannot reject challenge (<see cref="T:Scoreloop.CoreSocial.API.IChallengeController" />). It might be already accepted, rejected or completed.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeNotParticipant">
      <summary>
            Client side: a user is not participating in a challenge but some data is assigned, (e.g. a score).
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ChallengeGameModeMismatch">
      <summary>
            Client side: a score does not have the same game mode as the challenge.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.UserNotFound">
      <summary>
            User not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.UserInvalidArguments">
      <summary>
            Invalid arguments during user request.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.UserInvalidDevice">
      <summary>
            Invalid device during user request.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.UserInvalidLoginDueToBadLanguage">
      <summary>
            Login name invalid due to bad language.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.BuddyhoodInvalidArguments">
      <summary>
            Invalid arguments when accessing friends-list.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.BuddyhoodNotFound">
      <summary>
            Friends-list not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.PaymentInvalidCreditCard">
      <summary>
            Invalid credit card number.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.PaymentPriceNotFound">
      <summary>
            Price not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.PaymentBookAlreadyRedeemedByUser">
      <summary>
            The payment referenced through payment credentials was redeemed before by the same user.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.PaymentBookAlreadyRedeemed">
      <summary>
            The payment referenced through payment credentials was redeemed before
            by the user who purchased the app.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.PaymentBookGeneralError">
      <summary>
            General payment error.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.DeviceNotExists">
      <summary>
            Device does not exist.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.DeviceFreed">
      <summary>
            Device is freed.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.DeviceBanned">
      <summary>
            Device is banned.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ScoreRankingInvalidRequest">
      <summary>
            Invalid rankings request.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.ScoreListNotSupported">
      <summary>
            This score list is not supported.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.SearchListNotFound">
      <summary>
            Search list not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.CurrencyConvertMismatch">
      <summary>
            Cannot convert currency from one format to another.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.AchievementCreate">
      <summary>
            Cannot add achievement.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.AchievementRemove">
      <summary>
            Cannot remove achievement.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.AchievementNotFound">
      <summary>
            Achievement not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.AchievementListMissing">
      <summary>
            Required AchievableList not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.AchievementUserMissing">
      <summary>
            Required user not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.AchievementListItemMissing">
      <summary>
            Required AchievableListItem not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.AchievementListChecksumMissing">
      <summary>
            Required AchievableListChecksum not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.AchievementListItemChecksumIncorrect">
      <summary>
            AchievableListChecksum does not match.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.AchievementGameMissing">
      <summary>
            Game not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.AchievementGameIncorrect">
      <summary>
            Game does not match.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.SocialProviderDisconnected">
      <summary>
            One or more social providers tergeted are not connected.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.UserContextInvalidArguments">
      <summary>
            UserContext request passed with invalid arguments.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.UserContextUpdateInvalidArguments">
      <summary>
            UserContext update request passed with invalid arguments.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.UserContextCannotInitialize">
      <summary>
            Could not initialize user context.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.UserContextVersionMismatch">
      <summary>
            Could not update the user context. HTTP status is conflicting.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.GameItemNotPurchased">
      <summary>
            Game item is not unlocked for the given user.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.GameItemReceiptDataVerificationFailed">
      <summary>
            Purchase could not be confirmed for given receipt data.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.GameItemReceiptDataDoesNotMatchGameItem">
      <summary>
            Receipt data does not match requested game item.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.GameItemReceiptDataMissingInformation">
      <summary>
            Receipt data is missing information.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.GameItemReceiptDataUnparseable">
      <summary>
            Receipt data was not parseable = JSON parse error.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.ErrorCode.GameWithoutReleasedAchievementList">
      <summary>
            Game has no released achievements list yet.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IAchievementController">
      <summary>
            The IAchievmentController manages single instances of of the Achievement class
            and is used to increment the value of an award, set the status of the award
            to "achieved", and to submit an <see cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> to the server.
            Once an achievement has been submitted to the server, the balance of the
            user will be updated with the amount of currency specified by the achievement, 
            (note that you can have awards and achievements that have no currency reward).
            
            Basic Usage:
            <br /><ol><li>Use the ScoreloopClient to get an instance of IAchievementController,
            or re-use an existing one</li><li>Use one of the methods:
            <ul><li>IncrementValue(...)</li><li>SetValue(...)</li><li>ResetValue(...)</li><li>SetAchieved(...)</li></ul></li><li>Call one of the Submit(...) methods to submit the achievement
            to the server.</li><li>Await notification of success by seeing if the AchievementSubmitted event fires or not.</li></ol></summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IRequestController">
      <summary>
            Base interface for all Scoreloop public API controllers.
            The purpose of this interface is to provide a strongly-typed solution across
            the whole SDK with IntelliSense support and with no casting required.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IRequestController.Cancel">
      <summary>
            Cancels any current request that might be underway. 
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IRequestController.RequestCancelled">
      <summary>
            This event is fired each time a request to the server made by the controller is cancelled.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IRequestController.RequestFailed">
      <summary>
            This event is fired each time a request to the server made by the controller fails. 
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IRequestController.RequestEnqueued">
      <summary>
            This event is fired each time a request to the server made by the controller is enqueued.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IRequestController.ResponseReceived">
      <summary>
            This event is fired each time a request to the server made by the controller succeeds. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestController.Session">
      <summary>
            Gets the reference to the current session.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestController.Client">
      <summary>
            Gets the reference to the current Scoreloop client.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestController.Tag">
      <summary>
            Any user-defined value associated with this controller.
            The same value will be also present with LastResponse.
            This could be used for controller identification.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestController.IsProcessing">
      <summary>
            Indicates if the controller currently has an ongoing operation/request.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestController.Error">
      <summary>
            Gets a reference to the error generated with the most recent request made by the controller.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.GetAchievement(System.String)">
      <summary>
            Gets the <see cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object that is associated with
            the given award identifier. The identifier is 
            something that is chosen by you when you configured the award
            on https://develeoper.scoreloop.com.
            </summary>
      <param name="awardID">A string representing the award identifier associated
            with the achievement that you want to retrieve.</param>
      <returns>The <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> associated with the award that is identified by the 
            awardID argument.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.IncrementValue(Scoreloop.CoreSocial.API.Model.Achievement)">
      <summary>
            This method increments the value counter of the award associated
            with the achievement. If after incrementing the new value of the award
            means that it has been "achieved" by the user, then you should 
            make sure to use the controller to submit the Achievement to the server.
            Call one of the Submit(...) methods to do this.
            </summary>
      <param name="achievement">The achievement object whose associated award will be incremented.</param>
      <returns>The <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> associated with the award that has been incremented.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.IncrementValue(System.String)">
      <summary>
            This method increments the value counter of the award associated
            with the given identifier. If after incrementing the new value of the award
            means that it has been "achieved" by the user, then you should 
            make sure to use the controller to submit the Achievement to the server.
            Call one of the Submit(...) methods to do this.
            </summary>
      <param name="awardID">
            A <see cref="T:System.String" /> representing the identifier of the award 
            whose value will be incremented. The identifier is chosen by you when
            the award is configured on https://developer.scoreloop.com.
            </param>
      <returns>The <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> associated with the award that has been incremented.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.SetValue(Scoreloop.CoreSocial.API.Model.Achievement,System.UInt32)">
      <summary>
            This method sets the value of the award associated with the given 
            <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> equal to the value passed as an argument.
            <br />
            If the new value of the award means that it has been "achieved"
            by the user, then you should make sure to use the controller
            to submit it to the server. Use one of the Submit(...) methods
            to do this.
            </summary>
      <param name="achievement">
            The <see cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object whose associated award object
            will have its value modified. 
            </param>
      <param name="value">
            The value to which the award object of the 
            associated <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> will be set.
            </param>
      <returns>
            The <see cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object whose award has been modified. 
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.SetValue(System.String,System.UInt32)">
      <summary>
             This method sets the value of the award identified by the
             given award identifier equal to the value passed as an argument.
             <br />
             If the new value of the award means that it has been "achieved"
             by the user, then you should make sure to use the controller
             to submit it to the server. Use one of the Submit(...) methods
             to do this.
             </summary>
      <param name="awardID">
             The identifier of the award whose value will be set. The identifier
             is chosen by you when you configure the award on https://developer.scoreloop.com.
             </param>
      <param name="value">The value to which the award will be set.
             </param>
      <returns>
             A <see cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.ResetValue(Scoreloop.CoreSocial.API.Model.Achievement)">
      <summary>
            This method will reset the value of the award associated
            with the given <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object. The 
            value of the award wil be reset to the default "initial value"
            that was defined by you when configuring the award on https://developer.scoreloop.com.
            </summary>
      <param name="achievement">
            The <see cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object whose award will be reset.
            </param>
      <returns>
            The <see cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object whose award was reset.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.ResetValue(System.String)">
      <summary>
            This method will reset the value of the award associated
            with the given identifier. The identifier was chosen by you
            when configuring the award on https://developer.scoreloop.com. The 
            value of the award wil be reset to the default "initial value"
            that was defined by you when configuring the award.
            </summary>
      <param name="awardID">The identifier of the award that is to be reset.</param>
      <returns>
            The <see cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object whose award was reset.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.SetAchieved(Scoreloop.CoreSocial.API.Model.Achievement)">
      <summary>
            This method sets the status of the given achievement
            to "achieved". 
            </summary>
      <param name="achievement">
            The <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object whose status will
            be set to "achieved".
            </param>
      <returns>
            The <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object whose status was modified.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.SetAchieved(System.String)">
      <summary>
            This method sets the status of the award identified by the given
            identifier to "achieved". Note that the <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" />
            object associated with the award will also be marked as "achieved".
            </summary>
      <param name="awardID">
            The identifier of the award that is to be marked as "achieved". 
            The identifier is chosen by you when configuring the award on 
            https://developer.scoreloop.com.
            </param>
      <returns>
            The <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object whose status was modified.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.Submit(Scoreloop.CoreSocial.API.Model.Achievement)">
      <summary>
            This method submits an <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object to the server.
            After submitting, you should await a successful server response by seeing if the
            AchievementSubmitted event fires or not.
            </summary>
      <param name="achievement">The achievement to be submitted.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementController.Submit(System.String)">
      <summary>
            This method submits the <see cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> associated with the award
            identifed by the given identifier to the server. The identifier is chosen by
            you when configuring the award on https://developer.scoreloop.com.
            After submitting, you should await a successful server response by seeing if the
            AchievementSubmitted event fires or not.
            </summary>
      <param name="awardID">
            The identifier of the award whose associated <seealso cref="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement" /> object
            will be submitted to the server. 
            </param>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IAchievementController.AchievementSubmitted">
      <summary>
            This event is fired each time an achievement is successfully submitted to the server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IAchievementController.Achievement">
      <summary>
            Gets the achievement that is the controller is currently processing.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IAchievementsController">
      <summary>
            The IAchievementsController  is used to retrieve the current list of <seealso cref="T:Scoreloop.CoreSocial.API.Model.Achievement" /> 
            objects from the server.
            Note that you must have configured awards for your game on https://developer.scoreloop.com.
            Part of this configuration process includes choosing a unique identifier for each and every
            award, (e.g. we suggest using a reverse DNS scheme for your identifiers).
            Once awards have been configured, Scoreloop generates an awards bundle, which you must add to your game project. 
            This provides local access to information about the configured awards, including their identifiers and achieving values, among other things.
            Be aware that you will need to call the LoadAchievement() method at least once in order to have
            properly synchronised local access to the awards bundle.
            
            Basic Usage (to load the achievements list from the server):
            <br /><ol><li>Use the ScoreloopClient to get an instance of the IAchievementsController, or else reuse
            an existing one.</li><li>Call one of the LoadAchievements(...) methods below.</li><li>Await a successful response from the server by seeing if the AchievementsLoaded event
            fires or not.</li><li>After a successful server response, access the Achievements array.</li></ol></summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IRequestListController">
      <summary>
            This interface defines a common set of properties available to controllers
            that request lists of items from the server, e.g. (lists of friends/scores/challenges/...).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestListController.Game">
      <summary>
            Gets the game associated with given data.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestListController.User">
      <summary>
            Gets the user associated with given data.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestListController.Range">
      <summary>
            Gets the range of loaded data.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestListController.ExpectedLength">
      <summary>
            Gets the original length the data was requested for.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementsController.GetAchievement(System.String)">
      <summary>
            Gets the <seealso cref="T:Scoreloop.CoreSocial.API.Model.Achievement" /> object associated with given award
            identifier. The identifier is chosen by you when configuring the award 
            on https://developer.scoreloop.com.
            </summary>
      <returns>The <seealso cref="T:Scoreloop.CoreSocial.API.Model.Achievement" /> object associated with the given award identifier.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementsController.LoadLocalAchievements">
      <summary>
            This method loads achievements from local storage.
            No authentication or network connection is required to complete this task.
            The loaded list can be accessed via the Achievements array.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementsController.LoadAchievements">
      <summary>
            This method loads achievements from the Scoreloop server.
            After calling this method, you should await a successful response from
            the server by seeing if the AchievementsLoaded event fires or not.
            After it fires, you can access the loaded achievements via the
            Achievements array.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementsController.LoadAchievements(Scoreloop.CoreSocial.API.Model.User)">
      <summary>
            This method loads from the Scoreloop server the achievements associated with the given user.
            After calling this method you should await a successful response from the server by seeing if 
            the AchievementsLoaded event fires or not. After it fires, you can access the loaded 
            achievements via the Achievements array.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IAchievementsController.Synchronize">
      <summary>
            This method synchronizes awards stored locally with the Scoreloop server.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IAchievementsController.AchievementsLoaded">
      <summary>
            This event fires each time the list of achvievements is 
            loaded from the server. 
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IAchievementsController.AchievementsSynchronized">
      <summary>
            This event is fired each time the list of local achievements is synchronized
            with the server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IAchievementsController.Achievements">
      <summary>
            This provides access to the list of achievements that have been either been successfully retrieved 
            from the server or else loaded from local storage.
            Make sure that you only access this array after the AchievementsLoaded event has fired (if accessing 
            the list loaded from the server). If accessing the list loaded from local storage make sure
            that the LoadLocalAchievements() method has been called first. 
            </summary>
      <returns>The list of achievements that have been retrieved from the server.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IAchievementsController.Awards">
      <summary>
            This gets the list of available awards that have been defined in the game.
            </summary>
      <returns>The list of awards that are defined in the game.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IAchievementsController.AchievedCount">
      <summary>
            This gets the number of achievements that have been "achieved" by the user.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IAchievementsController.AwardList">
      <summary>
            Gets the reference to the list of awards.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IAchievementsController.ShouldSynchronize">
      <summary>
            Indicates whether the local achievements should be synchronized with the Scoreloop server.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IActivitiesController">
      <summary>
            The IActivitiesController is an interface that is used to request lists
            of game or friends activities. 
            <br />
            Basic Usage:
            <ul><li>Use the ScoreloopClient to get an instance of IActivitiesController, or re-use
            an existing one.</li><li>Use the controller to call the LoadActivities(ActivitiesList, Int32) method.
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ActivitiesList" /> argument specifies the type of activities you
            want to request from the server.</li><li>Await notification of success by observing if the ActivitiesLoaded event fires or not.</li><li>After a successful response of the server, access the list of requested activities via the
            Activities array.</li></ul></summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IActivitiesController.LoadActivities(Scoreloop.CoreSocial.API.Model.ActivitiesList,System.UInt32)">
      <summary>
            This method requests a list of activities from the 
            server. After calling this method you should wait for the
            ActivitiesLoaded event to fire. This indicates a successful
            response from the server. After this point, the list of 
            activities can be accessed via the activities array. 
            </summary>
      <param name="list">An <see cref="T:Scoreloop.CoreSocial.API.Model.ActivitiesList" /> specifying the 
            type of list you wish to request, (e.g. friends or game activities).
            </param>
      <param name="limit">
            The number of activities that needs to be loaded
            </param>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IActivitiesController.ActivitiesLoaded">
      <summary>
            This event is fired each time a list of activities is successfully loaded from the server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IActivitiesController.Activities">
      <summary>
            Provides access to the list of activities that has been 
            loaded from the server. The list can only be accessed after 
            the ActivitiesLoaded event has been fired. Trying to access it before 
            this point will return an empty list.
            </summary>
      <returns>An array of <see cref="T:Scoreloop.CoreSocial.API.Model.Activity" /> objects.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IActivitiesController.List">
      <summary>
            Gets the source list for the activities that were requested and loaded from the server.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IChallengeController">
      <summary>
            The IChallengeController interface is used to:
            <ul><li>create a challenge</li><li>accept a challenge</li><li>reject a challenge</li><li>submit a completed challenge to Scoreloop</li></ul></summary>
      <remarks>
        <br />
            Challenge Lifecycle:
            <br /><ol><li>A user decides on the challenge stake and creates a challenge. It is at this stage 
            that they decide if the challenge should be "open" or "direct".</li><li>The user plays the challenge and submits their score to Scoreloop.</li><li>A second Scoreloop user accepts the challenge and pays the challenge stake.</li><li>The second user plays the game and submits their score to Scoreloop.</li><li>Scoreloop compares both challenge scores and declares a winner. The challenge winner
            receives the challenge prize (=75% of the combined challenge stakes). The original stake is not returned.</li></ol><br />
            Basic Usage:
            <br />
            To create a stake:
            <br />
            The IChallengeController implements the IStakeProvider interface
            which lets you create <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> objects that can be used
            as challenge stakes. To do this:
            <ol><li>Use the ScoreloopClient to get an instnace of IChallengeController, or re-use an existing one.</li><li>Use the IChallengeController to call the CreateStake(double) method inherited from 
            the <see cref="T:Scoreloop.CoreSocial.API.IStakeProvider" /> interface. This returns a <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object that can be used as the challenge stake.</li><li>Alternatively, use the IChallengeController to access the challenge Stakes (again inherited from 
            the IStakeProvider interface). The challenge stakes (an array of Money objects)
            represent a set of suggested values that can be used in challenges. They are related to the
            current balance of the user and change as their balance changes, (e.g. as the balance increases
            the smallest available value in the challenge stakes array will also increase).
            </li></ol><br />
            To create a challenge:
            <br /><ol><li>Use the ScoreloopClient to get an instance of IChallengeController, or re-use an existing one.</li><li>Call one of the CreateChallenge methods below to create a challenge with your desired parameters.</li><li>The challenge "contender" is the user who starts the challenge. The challenge "contestant" is the user who 
            accepts a challenge. When calling one of the CreateChallenge methods below, the "contender" is automatically
            set equal to the current session user. The challenge "contestant" can be set by passing a User object to one of 
            the CreateChallenge methods. This creates a "direct" challenge which can only be accepted by that specific user. 
            Passing a null value as the User argument in a CreateChallenge method creates an "open" challenge that may be
            accepted by any Scoreloop user.</li><li>Await notification of success by observing if the ChallengeCreated event is fired or not.</li></ol><br />
            To accept, reject, or submit a challenge:
            <ol><li>Use the ScoreloopClient to get an instance of IChallengeController (or re-use an existing controller instance).</li><li>Call the Accept(Challenge), Reject(Challenge), or SubmitResult(Challenge, Score) methods as required.</li><li>Await notification of success by observing if the ChallengeAccepted, ChallengeRejected, or ChallengeSubmitted events fire as appropriate.</li></ol><br /></remarks>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IStakeProvider">
      <summary>
            The IStakeProvider interface provides access to the 
            stakes (<see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> objects) that are used
            in Scoreloop challenges. The interface is implemented
            by the <see cref="T:Scoreloop.CoreSocial.API.IChallengeController" /> and the
            Scoreloop <see cref="T:Scoreloop.CoreSocial.API.Model.Session" /> class.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IStakeProvider.CreateStake(System.Double)">
      <summary>
            This method is used to create a new <see cref="T:Scoreloop.CoreSocial.API.Model.Money" />
            object that can be used as the stake in a Scoreloop
            challenge.
            </summary>
      <returns>A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object - the created stake.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IStakeProvider.Stakes">
      <summary>
            Gets suggested stake values for the user.
            These are related to the current balance of 
            the user and change as the balance changes.
            For example, as the user's balance increases
            the smallest available value in the array will
            also increase.
            </summary>
      <returns>An array of <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> objects
            with suggested challenge stake values.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IStakeProvider.Currency">
      <summary>
            Gets the 3-character currency code for the game.
            This is generated and assigned to 
            your game by Scoreloop when you registered it
            on https://developer.scoreloop.com.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengeController.CreateChallenge(Scoreloop.CoreSocial.API.Model.Money)">
      <summary>
            This method asynchronously creates a new challenge with the given stake and binds the 
            current session user to it. The session user is automatically set as the challenge "contender", which
            means that they will be the first player to take part in the challenge. This method creates what is termed 
            an "open" challenge, which means that after the session user (the "contender") plays the challenge,
            the challenge is open to any Scoreloop player to accept and take part.
            The challenge will be created in the default game mode 0. After calling this method
            you should await notification of success by observing if the ChallengeCreated event fires or not.
            </summary>
      <param name="stake">The amount of in-game currency corresponding to the challenge stake. 
            This is chosen by the user who starts the challenge and is normally taken from the
            ChallengeStakes property of the current Session. Depending on how the game is configured it is
            possible to play challenges with a challenge stake of zero.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengeController.CreateChallenge(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.User)">
      <summary>
            This method asynchronously creates a new challenge with the given stake
            and binds the current session user to it. The session user is automatically
            set as the challenge "contender", which
            means that they will be the first player to take part in the challenge. This method creates what is termed 
            a "direct" challenge, which means that after the session user (the "contender") plays the challenge,
            the challenge may only be accepted and played by the user passed as a method argument. 
            The challenge will be created in the default game mode 0.
            After calling this method
            you should await notification of success by observing if the ChallengeCreated event fires or not.
            </summary>
      <param name="stake">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object corresponding to the challenge stake. This is chosen by the user who 
            starts the challenge and is normally taken from the
            ChallengeStakes property of the current Session. Depending on how the game is configured it is
            possible to play challenges with a challenge stake of zero.
            </param>
      <param name="contestant">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> object corresponding to the second challenge player, (termed the "contestant"). 
            The challenge may only be accepted by this user.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengeController.CreateChallenge(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.User,System.UInt32,System.UInt32)">
      <summary>
            This method asynchronously creates a challenge with the given parameters and binds the current session user to it. The session user is automatically
            set as the challenge "contender", which
            means that they will be the first player to take part in the challenge. This method creates what is termed 
            a "direct" challenge, which means that after the session user (the "contender") plays the challenge,
            the challenge may only be accepted and played by the user passed as a method argument. 
            The challenge will be created with the specified mode and level passed as arguments.
            After calling this method
            you should await notification of success by observing if the ChallengeCreated event fires or not.
            </summary>
      <param name="stake">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object corresponding to the challenge stake. This is chosen by the
            user who starts the challenge and is normally taken from the ChallengeStakes property of the current
            Session. Depending on how the game is configured it is possible to play challenges wiht a challenge stake of zero.
            </param>
      <param name="contestant">
             A <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> object corresponding to the second challenge player, (termed the "contestant"). 
            The challenge may only be accepted by this user.
            </param>
      <param name="mode">
            A <see cref="T:System.Int32" /> corresponding to the mode in which the challenge will be created.
            A mode corresponds to a different gameplay setting such as difficulty or speed.
            </param>
      <param name="level">
            A <see cref="T:System.Int32" /> corresponding to the level in which the challenge will be created.
            A level corresponds to a different game stage, (level 1, level 2, etc). 
            </param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengeController.CreateChallenge(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.User,Scoreloop.CoreSocial.API.Model.Score)">
      <summary>
            This method asynchronously creates a challenge with the given parameters and binds the current session user to it. The session user is automatically
            set as the challenge "contender", which
            means that they will be the first player to take part in the challenge. This method creates what is termed 
            a "direct" challenge, which means that after the session user (the "contender") plays the challenge,
            the challenge may only be accepted and played by the user passed as a method argument. 
            The challenge will be created with a challenge score already present. <see cref="T:Scoreloop.CoreSocial.API.Model.Score" />
            objects can be configured with respect to modes and levels meaning that the challenge will be 
            created with the mode and level properties of the score argument.
            After calling this method
            you should await notification of success by observing if the ChallengeCreated event fires or not.
            </summary>
      <param name="stake">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object corresponding to the challenge stake. This is chosen by the
            user who starts the challenge and is normally taken from the ChallengeStakes property of the current
            Session. Depending on how the game is configured it is possible to play challenges wiht a challenge stake of zero.
            </param>
      <param name="contestant">
             A <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> object corresponding to the second challenge player, (termed the "contestant"). 
            The challenge may only be accepted by this user.
            </param>
      <param name="score">
            The challenge will begin in the mode and level of this <see cref="T:Scoreloop.CoreSocial.API.Model.Score" /> object. It will also
            provide the starting score for the challenge.
            </param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengeController.CreateChallenge(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.User,System.UInt32,System.UInt32,Scoreloop.CoreSocial.API.Model.Context)">
      <summary>
            This method asynchronously creates a challenge with the given parameters and binds the current session user to it. The session user is automatically
            set as the challenge "contender", which
            means that they will be the first player to take part in the challenge. This method creates what is termed 
            a "direct" challenge, which means that after the session user (the "contender") plays the challenge,
            the challenge may only be accepted and played by the user passed as a method argument. 
            The challenge will be created with the mode and level passed as arguments. The method 
            also takes a Context argument, which is used to pass additional information about the challenge
            to be created. After calling this method
            you should await notification of success by observing if the ChallengeCreated event fires or not.
            </summary>
      <param name="stake">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object corresponding to the challenge stake. This is chosen by the
            user who starts the challenge and is normally taken from the ChallengeStakes property of the current
            Session. Depending on how the game is configured it is possible to play challenges wiht a challenge stake of zero.
            </param>
      <param name="contestant">
             A <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> object corresponding to the second challenge player, (termed the "contestant"). 
            The challenge may only be accepted by this user.
            </param>
      <param name="mode">
            A <see cref="T:System.Int32" /> corresponding to the mode in which the challenge will be created.
            A mode corresponds to a different gameplay setting such as difficulty or speed.
            </param>
      <param name="level">
            A <see cref="T:System.Int32" /> corresponding to the level in which the challenge will be created.
            A level corresponds to a different game stage, (level 1, level 2, etc). 
            </param>
      <param name="context">
            The challenge context. Pass additional meta-data about the challenge here, if required. 
            </param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengeController.CreateChallenge(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.User,Scoreloop.CoreSocial.API.Model.Score,Scoreloop.CoreSocial.API.Model.Context)">
      <summary>
            This method asynchronously creates a challenge with the given parameters and binds the current session user to it. The session user is automatically
            set as the challenge "contender", which means that they will be the first player to take part in the challenge. 
            </summary>
      <remarks>
            This method creates what is termed 
            a "direct" challenge, which means that after the session user (the "contender") plays the challenge,
            the challenge may only be accepted and played by the user passed as a method argument. 
            The challenge will be created with a challenge score already present. <see cref="T:Scoreloop.CoreSocial.API.Model.Score" />
            objects can be configured with respect to modes and levels meaning that the challenge will be 
            created with the mode and level properties of the score argument. The method 
            also takes a Context argument, which is used to pass additional information about the challenge
            to be created. After calling this method
            you should await notification of success by observing if the ChallengeCreated event fires or not.
            <param name="stake">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object corresponding to the challenge stake. This is chosen by the
            user who starts the challenge and is normally taken from the ChallengeStakes property of the current
            Session. Depending on how the game is configured it is possible to play challenges wiht a challenge stake of zero.
            </param><param name="contestant">
             A <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> object corresponding to the second challenge player, (termed the "contestant"). 
            The challenge may only be accepted by this user.
            </param><param name="score">
            The challenge will begin in the mode and level of this <see cref="T:Scoreloop.CoreSocial.API.Model.Score" /> object. It will also
            provide the starting score for the challenge.
            </param><param name="context">
            The challenge context. Pass additional meta-data about the challenge here, if required.
            </param></remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengeController.Accept(Scoreloop.CoreSocial.API.Model.Challenge)">
      <summary>
            This method is used to accept a challenge on behalf of the session user. After calling this method
            you should await notification of success by observing if the ChallengeAccepted event fires or not.
            </summary>
      <remarks>
        <param name="challenge">
            The challenge to be accepted. 
            </param>
      </remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengeController.Reject(Scoreloop.CoreSocial.API.Model.Challenge)">
      <summary>
            This method is used to reject a challenge on behalf of the session user. After calling this method
            you should await notification of success by observing if the ChallengeRejected event fires or not.
            Note that only "direct" challenges can be rejected. There is no requirement to reject
            "open" challenges. 
            </summary>
      <param name="challenge">
            The challenge to be rejected. 
            </param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengeController.SubmitResult(Scoreloop.CoreSocial.API.Model.Challenge,Scoreloop.CoreSocial.API.Model.Score)">
      <summary>
            This method submits a challenge and the score obtained by the user in it, to the Scoreloop server.
            After calling this method
            you should await notification of success by observing if the ChallengeSubmitted event fires or not.
            The challenge and score are submitted on behalf of the session user. 
            </summary>
      <param name="challenge">
            The challenge to be submitted. 
            </param>
      <param name="score">
            The score obtained in the challenge. 
            </param>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IChallengeController.ChallengeCreated">
      <summary>
            This event is fired each time a challenge is created. 
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IChallengeController.ChallengeAccepted">
      <summary>
            This event is fired each time a challenge is accepted. 
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IChallengeController.ChallengeRejected">
      <summary>
            This event is fired each time a challenge is rejected. 
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IChallengeController.ChallengeSubmitted">
      <summary>
            This event is fired each time a challenge is submitted. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IChallengeController.Challenge">
      <summary>
            Returns the challenge object currently associated with the controller's last request.
            </summary>
      <returns>Challenge - The current challenge object.</returns>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IChallengesController">
      <summary>
            The IChallengesController retrieves lists of challenges from the server.
            </summary>
      <remarks>
            Two lists may be retrieved:
            <ul><li>The list of challenges that are available for the session user to play.</li><li>The challenge history of the session user, (e.g. challenges played, rejected, or challenges currently open)</li></ul><br />
            Basic Usage:
            <br /><ol><li>Use the <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" /> to get an instance of the IChallengesController.</li><li>Make the server request using one of the LoadChallenges methods, below.</li><li>Await notification of success by monitoring if the ChallengesLoaded event is fired or not.</li><li>After a successful server request, you can access the retrieved challenges via the Challenges array.</li></ol><br />
            If you request the list of challenges that are available for the session user to play:
            <ul><li>If any direct challenges exist for the user, these will be returned first. Direct challenges are
            challenges that only the user can accept.</li><li>If no direct challenges exist, the list of open challenges will be returned. Open challenges
            are challenges that may be accepted and played by any Scoreloop user.</li></ul></remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengesController.LoadChallenges(Scoreloop.CoreSocial.API.Model.ChallengesList)">
      <summary>
            This method requests the given <see cref="T:Scoreloop.CoreSocial.API.Model.ChallengesList" /> from the server.
            Challenges will be requested for the default mode 0 and for the current game.
            After calling this method, you should wait until the ChallengesLoaded event 
            is fired, after which you can access the challenge array. </summary>
      <param name="list">The type of list to be requested. This will either be "Open"
            or "History"</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IChallengesController.LoadChallenges(Scoreloop.CoreSocial.API.Model.ChallengesList,Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            This method requests the given <see cref="T:Scoreloop.CoreSocial.API.Model.ChallengesList" /> from the server.
            Challenges will be requested for default mode 0 and for the given <see cref="T:Scoreloop.CoreSocial.API.Model.Game" /> argument.
            After calling this method, you should wait until the ChallengesLoaded event 
            is fired, after which you can access the challenge array. </summary>
      <param name="list">The type of list to be requested. This will either be "Open"
            or "History"</param>
      <param name="game">Specify the game for which you wish to request challenges here.</param>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IChallengesController.ChallengesLoaded">
      <summary>
            This event is fired when the challenges are loaded after a successful server request. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IChallengesController.Challenges">
      <summary>
            Provides access to the list of challenges that have been loaded from 
            the server. This list can only be accessed after the ChallengesLoaded
            event has been fired. Trying to access the challenges array before this
            will return an empty list. 
            </summary>
      <returns>The array of challenges that were successfully requested from the server.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IChallengesController.List">
      <summary>
            Provides access to the type of list returned by the last
            successful request made by the controller. This will always be
            either "Open", (the list of all challenges available for the session user to play), 
            or "History", (the challenge history for the session user).
            </summary>
      <returns>The <see cref="T:Scoreloop.CoreSocial.API.Model.ChallengesList" /> used in the most recent controller request.</returns>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IGameController">
      <summary>
            A data controller used to retrieve information about a game when only the identifier is present.
            <br />
            Basic Usage:
            <ol><li>Create an instance of IGameController, using ScoreloopClient.</li><li>Call LoadGame() method with game identifier.</li><li>Await notification of success via designated GameLoaded callback event.</li><li>After a successful request, access the "Game" attribute of the controller.</li></ol></summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameController.LoadGame(Scoreloop.CoreSocial.API.Model.Activity)">
      <summary>
            Loads details about specific game, that is associated with given activity.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameController.LoadGame(Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            Loads detailed info about specific game.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameController.LoadCurrentGame">
      <summary>
            Reloads info about current game.
            It also refreshes content of game info stored in session.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameController.LoadCurrentGame(System.Boolean)">
      <summary>
            Reloads info about current game.
            It also has the ability to refresh content of game info stored in session.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IGameController.GameLoaded">
      <summary>
            This event fires each time a game info is successfully loaded from the server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameController.Game">
      <summary>
            Gets the game object describing loaded game from server.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IGameItemController">
      <summary>
            Controller for managing the single instance of <seealso cref="P:Scoreloop.CoreSocial.API.IGameItemController.GameItem" />.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameItemController.LoadItem(Scoreloop.CoreSocial.API.Model.GameItem)">
      <summary>
            Reloads info about specified game item.
            It might be required to reload game item data in case of some metadata, naming or description changes.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameItemController.LoadItem(Scoreloop.CoreSocial.API.Model.GameItem,System.String)">
      <summary>
            Reloads info about specified game item assuming that specified currency will be used.
            It might be required to reload game item data in case of some metadata, naming or description changes.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameItemController.SubmitOwnership(Scoreloop.CoreSocial.API.Model.GameItem)">
      <summary>
            Claims user's ownership of given item.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameItemController.RequestItemDownloadURL(Scoreloop.CoreSocial.API.Model.GameItem)">
      <summary>
            Requests making the content of given game item available for short period of time.
            The download URL will be individual.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameItemController.DownloadItem(Scoreloop.CoreSocial.API.Model.GameItem)">
      <summary>
            Downloads the content of game item. If provided item doesn't contain the DownloadURL definition,
            it will be requested in context of session user. The download process is done asynchronously,
            so other calls to Scoreloop are not affected if receiving the content takes longer time.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameItemController.CancelItemDownload">
      <summary>
            Cancels downloading of an item.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IGameItemController.ItemLoaded">
      <summary>
            This event is fired when the item info is loaded from Scoreloop server.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IGameItemController.ItemOwnershipSubmitted">
      <summary>
            This event is fired when user received successfully ownership for given game item.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IGameItemController.ItemDownloadUrlLoaded">
      <summary>
            This event is fired when the download URL has been generated for given game item.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IGameItemController.ItemDownloaded">
      <summary>
            This event is fired when the binary content of the game item is downloaded.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IGameItemController.ItemDownloadCancelled">
      <summary>
            This event is fired when download item request is cancelled.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemController.GameItem">
      <summary>
            Gets the game item all operations are performed on.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemController.Currency">
      <summary>
            Gets the currency some of the operations are associated with.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemController.DownloadURL">
      <summary>
            Gets the game item download URL if requested, when ready.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemController.IsDownloading">
      <summary>
            Gets an indication if current controller is downloading an item.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IGameItemsController">
      <summary>
            The IGameItemsController retrieves lists of game items from the server.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameItemsController.LoadLocalItems">
      <summary>
            Loads list of already downloaded game items.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameItemsController.LoadItems(Scoreloop.CoreSocial.API.Model.GameItemsList)">
      <summary>
            Loads the full list of game items from the server.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameItemsController.LoadItems(Scoreloop.CoreSocial.API.Model.GameItemsList,System.String)">
      <summary>
            Loads the full list of game items from the server for given currency.
            Currency should be given as ISO-currency code.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGameItemsController.LoadItems(Scoreloop.CoreSocial.API.Model.GameItemsList,System.String,System.Collections.Generic.IEnumerable{System.String},Scoreloop.CoreSocial.API.Model.TagSearchOperator)">
      <summary>
            Loads the full list of game items from the server for given currency and tags.
            Currency should be given as ISO-currency code.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IGameItemsController.GameItemsLoaded">
      <summary>
            This event is fired when the list of game items and coin packs is received from Scoreloop server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemsController.GameItems">
      <summary>
            Gets the list of downloadable game items and coin packs.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemsController.List">
      <summary>
            Gets the type of search list that was issued.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemsController.Tags">
      <summary>
            Gets the tags that were issued during the search.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemsController.SearchOperator">
      <summary>
            Gets the indication, how the tags are treated during the search.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemsController.Currency">
      <summary>
            Gets the currency associated with the search.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemsController.Item(System.String)">
      <summary>
            Gets the game-item with matching product identifier.
            List of game-items must be loaded first.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGameItemsController.Item(System.String,System.Boolean)">
      <summary>
            Gets the game-item matching product name.
            List of game-items must be loaded first.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IGamesController">
      <summary>
            The IGamesController is used to retrieve lists of <seealso cref="T:Scoreloop.CoreSocial.API.Model.Game" /> objects from the server.
            <br />
            Basic Usage:
            <ol><li>Use the ScoreloopClient to get an instance of IGamesController or else re-use an existing one.</li><li>Make the server request using one of the LoadGames(...) methods.</li><li>Await a successful server response by seeing if the GamesLoaded event fires or not.</li><li>After a succcessful server response, access the retrieved games via the Games array.</li></ol></summary>
      <remarks>You can filter the type of games you want to request from the server by 
            specifying a <seealso cref="T:Scoreloop.CoreSocial.API.Model.GamesList" /> for the controller. Permitted GamesLists include:
            <ul><li>The list of all Scoreloop-enabled games.</li><li>The list of Scoreloop games played by the user.</li><li>The list of Scoreloop games played by friends of the user who also share the same device.</li><li>The list of Scoreloop games featured for the device of the user.</li><li>The list of most popular Scoreloop games for the device of the user.</li><li>The list of new Scoreloop games for the device of the user.</li></ul></remarks>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IRequestPageableListController">
      <summary>
            Interface defining access to Scoreloop server data that can be pageable.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IRequestPageableListController.LoadNextRange">
      <summary>
            Loads next set of items, based on arguments passed via last LoadXXX method.
            If loading is impossible (due to missing invocation of LoadXXX or non-existance of NextRange)
            exception will be thrown.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IRequestPageableListController.LoadPreviousRange">
      <summary>
            Loads previous set of items, based on arguments passed via last LoadXXX method.
            If loading is impossible (due to missing invocation of LoadXXX or non-existance of PreviousRange)
            exception will be thrown.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestPageableListController.HasPreviousRange">
      <summary>
            Gets the indication if there is a previous range for loaded data, (used to see if backwards pagination through the list is possible).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestPageableListController.PreviousRange">
      <summary>
            Gets the expected value of previous range or null in cases where it does not exist.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestPageableListController.HasNextRange">
      <summary>
            Gets the indication if there is a next range for loaded data, (used to see if forward pagination is possible).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRequestPageableListController.NextRange">
      <summary>
            Gets the expected next range.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGamesController.LoadGames(Scoreloop.CoreSocial.API.Model.Range)">
      <summary>
            This method loads games within the given range from 
            the server. After calling this method wait until the
            GamesLoaded event has fired (indicating a successful response
            from the server), before accessing the games via the Games array.
            </summary>
      <param name="range">The range of games to be requested.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGamesController.LoadGames(Scoreloop.CoreSocial.API.Model.Range,Scoreloop.CoreSocial.API.Model.GamesList)">
      <summary>
            This method loads games within the given range and for the
            given GamesList. After calling this method wait until the
            GamesLoaded event has fired (indicating a successful response
            from the server), before accessing the games via the Games array.
            </summary>
      <param name="range">The range of games to be requested.</param>
      <param name="list">The type of games to be requested.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGamesController.LoadGames(Scoreloop.CoreSocial.API.Model.Range,Scoreloop.CoreSocial.API.Model.User)">
      <summary>
            This method loads games within the given range and for the
            given user, (note that the other LoadGames(..) methods 
            make the request for the session user by default).
            After calling this method wait until the
            GamesLoaded event has fired (indicating a successful response
            from the server), before accessing the games via the Games array.
            </summary>
      <param name="range">The range of games to be requested.</param>
      <param name="user">The user for whom the list of games will be requested.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IGamesController.LoadGames(Scoreloop.CoreSocial.API.Model.Range,Scoreloop.CoreSocial.API.Model.GamesList,Scoreloop.CoreSocial.API.Model.User)">
      <summary>
            This method loads games within the given range and for the
            given GamesList. After calling this method wait until the
            GamesLoaded event has fired (indicating a successful response
            from the server), before accessing the games via the Games array.
            </summary>
      <param name="range">The range of games to be requested.</param>
      <param name="list">The type of games to be requested.</param>
      <param name="user">The user for whom the list of games will be requested.</param>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IGamesController.GamesLoaded">
      <summary>
            This event fires each time a list of games is successfully loaded from the server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGamesController.Games">
      <summary>
            Gets the list of games that were retrieved from the server.
            Make sure that you have called one of the LoadGames(...) methods
            and that the GamesLoaded event has fired before accessing this array,
            otherwise it will be empty.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IGamesController.List">
      <summary>
            Gets the GamesList that was set for the controller in the
            last request.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IHttpProvider">
      <summary>
            Abstraction for creating HTTP requests.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IHttpProvider.CreateBinaryRequest(System.String)">
      <summary>
            Creates a binary HTTP request for resource at given URL.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IHttpProvider.CreateStringRequest(System.String)">
      <summary>
            Creates a UTF-8 string HTTP request for resource at given URL.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ILicenseGuard">
      <summary>
            Interface defining licensing information and action available for the developer to present to user.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ILicenseGuard.Accept">
      <summary>
            Accepts EULA and allows further Scoreloop action execution.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ILicenseGuard.Reject">
      <summary>
            Rejects EULA and cancels all requests.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ILicenseGuard.IsLicenseAccepted">
      <summary>
            Gets the indication if user already accepted EULA.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ILicenseGuard.URL">
      <summary>
            URL where the EULA is available on-line.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ILogProvider">
      <summary>
            Interface providing access into debug log infrastructure.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ILogProvider.WriteLine(System.String)">
      <summary>
            Writes given message into debug log.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ILogProvider.WriteLine(System.Exception)">
      <summary>
            Writes exception into a debug log.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IMessageController">
      <summary>
            The IMessageController is used to post messages to a set of social networks, (or other receivers like emails).
            Posted messages usually refer to some Scoreloop-related entity such as a challenge, game or a score.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateInvitationTarget">
      <summary>
            Creates a message target, that will send invitation for current game.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateEmailReceiver">
      <summary>
            Creates a receiver, that will utilize user emails.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateSocialNetworkReceiver(Scoreloop.CoreSocial.API.Model.SocialNetwork)">
      <summary>
            Creates a receiver, that will utilize any of supported social-networks.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateScoreloopUserReceiver">
      <summary>
            Creates a receiver, that will utilize Scoreloop users.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateScoreloopSystemReceiver">
      <summary>
            Creates a receiver, that will utilize Scoreloop itself.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateMessage">
      <summary>
            Creates new empty message, that must be filled with target and receiver properties.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateMessage(Scoreloop.CoreSocial.API.Model.IMessageTarget,System.String,Scoreloop.CoreSocial.API.Model.IMessageReceiver,Scoreloop.CoreSocial.API.Model.User[])">
      <summary>
            Creates new message and presets its target, text and list of users who should receive it.
            Target can be: a game, a challenge, a score, an achievement.
            Receiver is an email receiver or any of supported social providers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateMessage(Scoreloop.CoreSocial.API.Model.IMessageTarget,System.String,Scoreloop.CoreSocial.API.Model.SocialNetwork,Scoreloop.CoreSocial.API.Model.User,Scoreloop.CoreSocial.API.Model.User[])">
      <summary>
            Creates new message and presets its target, text and list of users who should receive it.
            Target can be: a game, a challenge, a score, an achievement.
            Receiver is an email receiver or any of supported social providers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateMessage(Scoreloop.CoreSocial.API.Model.IMessageTarget,System.String,Scoreloop.CoreSocial.API.Model.SocialNetwork)">
      <summary>
            Creates new message and presets its target, text and list of users who should receive it.
            Target can be: a game, a challenge, a score, an achievement.
            Receiver is an email receiver or any of supported social providers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateGameInvitationMessage(System.String[])">
      <summary>
            Creates invitation message for non-Scoreloop users given by email adresses.
            It is a wrapper on CreateMessage method, that utilizes InvitationTarget and EmailReceiver.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateGameRecommendationMessage(System.String,Scoreloop.CoreSocial.API.Model.User[])">
      <summary>
            Creates game-invitation message for other Scoreloop users.
            It is a wrapper on CreateMessage method, that utilizes current Game and ScoreloopUserReceiver.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateGameRecommendationMessage(Scoreloop.CoreSocial.API.Model.User[])">
      <summary>
            Creates game-invitation message for other Scoreloop users.
            It is a wrapper on CreateMessage method, that utilizes current Game and ScoreloopUserReceiver.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.CreateUserAbuseReportMessage(System.String,Scoreloop.CoreSocial.API.Model.User)">
      <summary>
            Creates abuse report message against given Scoreloop users.
            It is a wrapper on CreateMessage method, that utilizes specific user and ScoreloopSystemReceiver.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IMessageController.Post(Scoreloop.CoreSocial.API.Model.Message)">
      <summary>
            Sends a message. Message must have at least target and single receiver with users set.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IMessageController.MessagePosted">
      <summary>
            Even fired each time message is sucessfully sent.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IMessageController.Message">
      <summary>
            Gets read-only message that was send to the server.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.INewsFeedController">
      <summary>
            Interface defining the possible operations to access news distributed via game developer on AdminSite panel.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.INewsFeedController.LoadNews">
      <summary>
            Loads news from Scoreloop server.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.INewsFeedController.MarkAsRead(Scoreloop.CoreSocial.API.Model.NewsFeedItem)">
      <summary>
            Marks given item as already read by user.
            This is a synchronous method, that only updates data on local storage.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.INewsFeedController.MarkAsUnread(Scoreloop.CoreSocial.API.Model.NewsFeedItem)">
      <summary>
            Marks given item as not yet read by user.
            This is a synchronous method, that only updates data on local storage.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.INewsFeedController.NewsLoaded">
      <summary>
            This event is fired each time the news are loaded from Scoreloop server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.INewsFeedController.NewsItems">
      <summary>
            Gets the list of loaded news items.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IPaymentMethodsController">
      <summary>
            Request controller that lists all payment methods and associated prices for given game item. 
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IPaymentMethodsController.LoadMethods(Scoreloop.CoreSocial.API.Model.GameItem)">
      <summary>
            Loads available payment methods for given game item.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IPaymentMethodsController.LoadMethods(Scoreloop.CoreSocial.API.Model.GameItem,System.String)">
      <summary>
            Loads available payment methods for given game item.
            Currency should be given as ISO-currency code.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IPaymentMethodsController.PaymentMethodsLoaded">
      <summary>
            This event is fired when the list of payment methods for given game item is received from Scoreloop server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IPaymentMethodsController.PaymentMethods">
      <summary>
            Gets the list of available payment methods.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IPaymentMethodsController.GameItem">
      <summary>
            Gets the game item associated with last request.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IPaymentMethodsController.Currency">
      <summary>
            Gets the currency associated with this request.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IPaymentProviderController">
      <summary>
            Request controller responsible for performing payments. 
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IPaymentProviderController.DoCheckout(Scoreloop.CoreSocial.API.Model.GameItem,System.Int32,Scoreloop.CoreSocial.API.Model.IWebBrowser)">
      <summary>
            Performs payment of given game item for given price.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IPaymentProviderController.RetryPendingPayment">
      <summary>
            Retries to verify state of pending payment. 
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IPaymentProviderController.CheckoutSucceeded">
      <summary>
            Event fired each time sucessfull payment has been performed. 
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IPaymentProviderController.CheckoutFinishedWithPendingPayment">
      <summary>
            Event fired each time request finished, but its status is not yet transfered from external payment system to Scoreloop.
            Pending payments needs to be reloaded on time-based manner, to refresh their state.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IPaymentProviderController.CheckoutVerificationFailed">
      <summary>
            Event fired each time payment has failed due to some data inconsistency checks in payment system. 
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IPaymentProviderController.BrowserStatusChanged">
      <summary>
            Event fired, when browser status is about to change to allow user proceed payments. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IPaymentProviderController.PaymentMethod">
      <summary>
            Gets the method associated with current payment. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IPaymentProviderController.PaymentProvider">
      <summary>
            Gets the payment provider associated with current payment. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IPaymentProviderController.Price">
      <summary>
            Gets the price, game item is about to be bought. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IPaymentProviderController.AvailablePrices">
      <summary>
            Gets the list of available prices associated with payment. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IPaymentProviderController.GameItem">
      <summary>
            Gets the game item associated with payment. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IPaymentProviderController.IsBrowserRequired">
      <summary>
            Gets an indication, if this controller needs the WebBrowser component to complete the payment. 
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IRankingController">
      <summary>
            Interface providing access to rankings.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IScoreSearchListProvider">
      <summary>
            Interface providing access to search lists.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreSearchListProvider.CreateScoreSearchList(Scoreloop.CoreSocial.API.Model.ScoreSearchListTimeScope)">
      <summary>
            Creates new instance of the score search list, based on given conditions.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreSearchListProvider.CreateScoreSearchList(Scoreloop.CoreSocial.API.Model.ScoreSearchListTimeScope,Scoreloop.CoreSocial.API.Model.ScoreSearchListCountryScope,Scoreloop.CoreSocial.API.Model.ScoreSearchListSocialScope)">
      <summary>
            Creates new instance of the score search list, based on given conditions.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoreSearchListProvider.ScoreSearchLists">
      <summary>
            Gets all system-defined score lists.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoreSearchListProvider.GlobalSearchList">
      <summary>
            Gets the global search list.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoreSearchListProvider.Last24hTimeSearchList">
      <summary>
            Gets the last-24h search list.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoreSearchListProvider.FriendsSearchList">
      <summary>
            Gets the search list with friends only.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoreSearchListProvider.NationalitySearchList">
      <summary>
            Gets user's nationality search list.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IRankingController.LoadRanking(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.Score)">
      <summary>
            Requests ranking for given score.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IRankingController.LoadRanking(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.Score,Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            Requests ranking for given score.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IRankingController.LoadRanking(Scoreloop.CoreSocial.API.Model.ScoreSearchList,System.UInt32)">
      <summary>
            Requests ranking for given user in given game mode.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IRankingController.LoadRanking(Scoreloop.CoreSocial.API.Model.ScoreSearchList,System.UInt32,Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            Requests ranking for given user in given game mode.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IRankingController.LoadRanking(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.User,System.UInt32)">
      <summary>
            Requests ranking for given user in given game mode.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IRankingController.LoadRanking(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.User,System.UInt32,Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            Requests ranking for given user in given game mode.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IRankingController.RankingLoaded">
      <summary>
            Event fired each time ranking was successfully loaded.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRankingController.SearchList">
      <summary>
            Gets the search list, where ranking was calculated.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRankingController.User">
      <summary>
            Gets the user associated with ranking.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRankingController.Mode">
      <summary>
            Gets the mode for which ranking
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRankingController.Rank">
      <summary>
            Gets the rank for given score or user/mode.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRankingController.Score">
      <summary>
            Gets the score at that rank.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRankingController.Game">
      <summary>
            Gets the game ranking was evaluated for.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IRankingController.TotalScoresCount">
      <summary>
            Gets the total number of scores.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IScoreController">
      <summary>
            The IScoreController interface is used to create new Score objects, as well as to submit Score objects to the server.
            </summary>
      <remarks>
        <B>Basic Usage:</B>
        <br />
            
            Creating a score:
            <ul><li>Call one of the CreateScore(...) methods below</li></ul><br />
            Submitting a score:
            <ol><li>Use the ScoreloopClient to create an instance of IScoreController.</li><li>Submit the score using one of the Submit(...) methods below.</li><li>Await notification of success by observering if the ScoreSubmitted event is fired or not.</li></ol></remarks>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IScoreProvider">
      <summary>
            Interface defining all local score creation capabilities.
            All scores created here won't have the rank and are associated with current session user.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreProvider.CreateScore(System.Double,System.UInt32)">
      <summary>
            Creates a new score object with the given parameters.
            </summary>
      <param name="result">The score result</param>
      <param name="mode">The game mode in which the score was obtained</param>
      <returns>Score, the created score.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreProvider.CreateScore(System.Double,System.UInt32,Scoreloop.CoreSocial.API.Model.Context)">
      <summary>
            Creates a new score object with the given parameters
            </summary>
      <param name="result">The score result</param>
      <param name="mode">The game mode in which the score was obtained</param>
      <param name="context">The score context. Use this to pass additional data associated with the score to the server, (e.g. a list of associated strings)</param>
      <returns>Score, the created score.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreProvider.CreateScore(System.Double,System.Double,System.UInt32)">
      <summary>
            Creates a new score object with the given parameters.
            </summary>
      <param name="result">The main score result</param>
      <param name="minorResult">A secondary result obtained during gameplay.</param>
      <param name="mode">The game mode at which the score was obtained</param>
      <returns>Score, the created score.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreProvider.CreateScore(System.Double,System.Double,System.UInt32,System.UInt32,Scoreloop.CoreSocial.API.Model.Context)">
      <summary>
            Creates a new score object with the given parameters.
            </summary>
      <param name="result">The main score result</param>
      <param name="minorResult">A secondary result obtained during gameplay</param>
      <param name="mode">The game mode at which the score was obtained. Leaderboards are generated per mode</param>
      <param name="level">The additional parameter which specifies the level for which the score was achieved</param>
      <param name="context">The additional score context where you could store additional data about the score</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreProvider.CreateScore(System.TimeSpan,System.UInt32)">
      <summary>
            Creates a new score object with the given parameters.
            </summary>
      <param name="result">The time elapsed set as the score result</param>
      <param name="mode">The game mode in which the score was obtained</param>
      <returns>Score, the created score.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreProvider.CreateScore(System.TimeSpan,System.UInt32,Scoreloop.CoreSocial.API.Model.Context)">
      <summary>
            Creates a new score object with the given parameters
            </summary>
      <param name="result">The time elapsed set as the score result</param>
      <param name="mode">The game mode in which the score was obtained</param>
      <param name="context">The score context. Use this to pass additional data associated with the score to the server, (e.g. a list of associated strings)</param>
      <returns>Score, the created score.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreProvider.CreateScore(System.TimeSpan,System.Double,System.UInt32)">
      <summary>
            Creates a new score object with the given parameters.
            </summary>
      <param name="result">The time elapsed set as the score result</param>
      <param name="minorResult">A secondary result obtained during gameplay.</param>
      <param name="mode">The game mode at which the score was obtained</param>
      <returns>Score, the created score.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreProvider.CreateScore(System.Double,System.TimeSpan,System.UInt32,System.UInt32,Scoreloop.CoreSocial.API.Model.Context)">
      <summary>
            Creates a new score object with the given parameters.
            </summary>
      <param name="result">The main score result</param>
      <param name="minorResult">A secondary result obtained during gameplay, but set as a time elapsed</param>
      <param name="mode">The game mode at which the score was obtained. Leaderboards are generated per mode</param>
      <param name="level">The additional parameter which specifies the level for which the score was achieved</param>
      <param name="context">The additional score context where you could store additional data about the score</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreController.Submit(Scoreloop.CoreSocial.API.Model.Score)">
      <summary>
            Submits a score to the server. After calling this method you will receive notification of success or failure
            via asynchronous delegate callbacks.
            </summary>
      <param name="score">The score to be submitted</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoreController.Submit(Scoreloop.CoreSocial.API.Model.Score,Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            Submits a score to the server with the given parameters. After calling this method you will receive notification of
            success or failure via asynchronous delegate callbacks.
            </summary>
      <param name="score">The score to be submitted</param>
      <param name="game">The game in which the score was obtained</param>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IScoreController.ScoreSubmitted">
      <summary>
            This event is fired each time a score is successfully submitted.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoreController.Score">
      <summary>
            The Score object currently associated with the controller.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoreController.User">
      <summary>
            The user who obtained the Score object associated with the controller.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoreController.Game">
      <summary>
            The Game the score associated with the controller was achieved in.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IScoresController">
      <summary>
            The IScoresController interface is used to retrieve lists of <see cref="T:Scoreloop.CoreSocial.API.Model.Score" /> objects from
            the server. These sorted lists of scores are referred to as "leaderboards".
            </summary>
      <remarks>
            Basic Usage:
            <br /><ol><li>Use the ScoreloopClient to get an instance of IScoresController.</li><li>Request the scores from the server using one of the LoadScores methods below. The lists of scores are filtered according to
            certain criteria specified by you. These filter criteria are controlled by the type of <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> you choose to
            pass to the LoadScore methods.</li><li>Await notification of success via the ScoresLoaded EventHandler.</li><li>After a successful server request, access the list of requested scores via the Scores
            array, below</li></ol></remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,System.UInt64,System.UInt32)">
      <summary>
            This method loads a list of scores from the server for a given rank. 
            The rank corresponds to an absolute placing on a leaderboard, (e.g. first, second, third). 
            The method will request the list of scores with the given rank in the middle of the list.
            For some rankings it is not possible to return a list with the given ranking in the middle. 
            For example, the first placed rank in a list has no other ranks above it, so a centred list 
            is not possible. The request will search for scores with the default game mode 0.
            After a successful request, (indicated by the firing of the ScoresLoaded event), you
            can access the scores via the scores array. 
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server. 
            </param>
      <param name="rank">
            The rank around which the list will be requested.
            </param>
      <param name="limit">
            The request will stop once the server reaches this number. 
            </param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,System.UInt64,System.UInt32,System.UInt32,Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            This method loads a list of scores from the server for a given rank. 
            The rank corresponds to an absolute placing on a leaderboard, (e.g. first, second, third). 
            The method will request the list of scores with the given rank in the middle of the list.
            For some rankings it is not possible to return a list with the given ranking in the middle. 
            For example, the first placed rank in a list has no other ranks above it, so a centred list 
            is not possible. The request will search for scores with the mode argument.
            After a successful request, (indicated by the firing of the ScoresLoaded event), you
            can access the scores via the scores array. 
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server. 
            </param>
      <param name="rank">
            The rank around which the list will be requested.
            </param>
      <param name="limit">
            The request will stop once the server reaches this number. 
            </param>
      <param name="mode">The mode of the scores to be returned</param>
      <param name="game">The game in which the scores to be returned were obtained</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.Range)">
      <summary>
            This method loads a list of scores for a given range from the server, (e.g. loads scores in the range 1-25).
            The request will load scores with the default mode 0.
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server. 
            </param>
      <param name="range">
            The range of scores to be loaded from the server.
            </param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.Range,Scoreloop.CoreSocial.API.Model.Score)">
      <summary>
            This method loads a list of scores for a given range from the server, (e.g. loads scores in the range 1-25). 
            Given score will be displayed in the result list at the rank described by it, otherwise rejected. The "injection"
            of the score into the returned list is local and happens only on the client side for display purposes. The
            score argument to this method does not appear in the list that is retrieved from the server. 
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server. 
            </param>
      <param name="range">The range of scores to be returned</param>
      <param name="scoreToInject">The score object that will be locally displayed as part of the retrieved list</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.Range,System.UInt32)">
      <summary>
            This method loads a list of scores for a given range and a given mode from the server, (e.g. loads scores in the range 1-25). 
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server. 
            </param>
      <param name="range">The range of scores to be returned</param>
      <param name="mode">The mode of the scores that are requested</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.Range,Scoreloop.CoreSocial.API.Model.Score,Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            This method loads a list of scores for a given range from the server, (e.g. loads scores in the range 1-25). 
            Given score will be displayed in the result list at the rank described by it, otherwise rejected. The "injection"
            of the score into the returned list is local and happens only on the client side for display purposes. The
            score argument to this method does not appear in the list that is retrieved from the server. 
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server. 
            </param>
      <param name="range">The range of scores to be returned</param>
      <param name="scoreToInject">The score object that will be locally displayed as part of the retrieved list</param>
      <param name="game">The game in which the requested scores were obtained</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.Range,System.UInt32,Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            This method loads a list of scores for a given range, mode, and game from the server. 
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server. 
            </param>
      <param name="range">The range of scores to be returned</param>
      <param name="mode">The mode for which the score was achieved</param>
      <param name="game">The game in which the requested scores were obtained</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.User,System.UInt32)">
      <summary>
            This method loads a list of scores with the score of the given user 
            in the middle of the list.
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server.
            </param>
      <param name="user">The user around whose score the returned list will be centred</param>
      <param name="limit">The request will stop once the server reaches this number</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.User,System.UInt32,System.UInt32)">
      <summary>
            This method loads a list of scores with a given mode. The score of the given
            user will be in the middle of the returned list. 
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server.
            </param>
      <param name="user">The user whose score should be in the middle of the list</param>
      <param name="limit">The request will stop once the server reaches this number</param>
      <param name="mode">The mode of the scores that will be returned by the server</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.User,System.UInt32,System.UInt32,Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            This method loads a list of scores with a given mode. The score of the given
            user will be in the middle of the returned list. 
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server.
            </param>
      <param name="limit">The request will stop once the server reaches this number</param>
      <param name="user">The user whose score should be in the middle of the list</param>
      <param name="mode">The mode of the scores that will be returned by the server</param>
      <param name="game">The game in which the scores to be returned were obtained</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.Score,System.UInt32)">
      <summary>
            This method loads a list of scores with a given mode. The given score 
            will be in the middle of the returned list. 
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server.
            </param>
      <param name="score">The score around which the returned list will be centred</param>
      <param name="limit">The request will stop once the server reaches this number</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IScoresController.LoadScores(Scoreloop.CoreSocial.API.Model.ScoreSearchList,Scoreloop.CoreSocial.API.Model.Score,System.UInt32,Scoreloop.CoreSocial.API.Model.Game)">
      <summary>
            This method loads a list of scores with a given mode. The given score 
            will be in the middle of the returned list. 
            </summary>
      <param name="list">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList" /> determines the type of list that will be returned by the server.
            </param>
      <param name="score">The score around which the returned list will be centred</param>
      <param name="limit">The request will stop once the server reaches this number</param>
      <param name="game">The game in which the scores to be returned were obtained</param>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IScoresController.ScoresLoaded">
      <summary>
            This event is fired when the list of scores requested from the server is successfully loaded.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoresController.SearchList">
      <summary>
            Provides access to the ScoreSearchList associated with the last request made by the controller. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoresController.Scores">
      <summary>
            Provides access to the list of requested scores that have been loaded from the server.
            These can only be accessed after the ScoresLoaded event has been fired, (indicating a
            successful response from the server). Trying to access the scores array before then will
            return an empty list.
            </summary>
      <returns>An array of <see cref="T:Scoreloop.CoreSocial.API.Model.Score" /> objects. The array contains the list of scores that were requested
            by calling one of the LoadScores methods.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoresController.ForScore">
      <summary>
            Gets the original score for which the list was searched for
            and which might be dummy placed on that list.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IScoresController.Mode">
      <summary>
            Provides access to the mode of the scores that were retrieved in the last request made by the controller. 
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IServiceProviderExt">
      <summary>
            Advanced version of service provider with full compilation time type-safety of requested controller.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IServiceProviderExt.GetService``1">
      <summary>
            Gets the instance of requested controller.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IServiceProviderExt.GetService``1(System.Object)">
      <summary>
            Gets the instance of requested controller.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ISessionController">
      <summary>
            The ISessionController interface is used to manually authenticate the Scoreloop session, when it be required.
            However all the actions called on any other IRequestControllers cause an automatic authentication,
            so using this controller should be limited to minimum. There are only few scenarios, when it
            is supposed to be used (e.g. keep the session alive for longer than default period).
            </summary>
      <remarks>
            Basic Usage:
            <ol><li>Use the <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" /> to get an instance of ISessionController.</li><li>Call the Authenticate() method below to manually authenticate the <see cref="T:Scoreloop.CoreSocial.API.Model.Session" /></li><li>Await notification of success by observing if the SessionAuthenticated event fires or not.</li></ol></remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ISessionController.Authenticate">
      <summary>
            This method requests authentication of the Scoreloop <see cref="T:Scoreloop.CoreSocial.API.Model.Session" /> from the server.
            After calling this method, you should await notification of success by observing if 
            the SessionAuthenticated event is fired or not.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.ISessionController.SessionAuthenticated">
      <summary>
            This event fired each time the Scoreloop session is authenticated.
            It is possible for this event to firecan fired multiple times during one application launch
            as session automatically expires after some inactivity.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ISocialNetworkController">
      <summary>
            Controller that is able to bind Scoreloop user with another existing account in a specified social-network.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ISocialNetworkController.Connect(Scoreloop.CoreSocial.API.Model.ISocialNetwork,Scoreloop.CoreSocial.API.Model.IWebBrowser)">
      <summary>
            Authenticates current session user inside a specified social network and then binds this profile with Scoreloop user.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ISocialNetworkController.Connect(Scoreloop.CoreSocial.API.Model.SocialNetwork,Scoreloop.CoreSocial.API.Model.IWebBrowser)">
      <summary>
            Authenticates current session user inside a specified social network and then binds this profile with Scoreloop user.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.ISocialNetworkController.Connected">
      <summary>
            Event fired when user has correctly bin authenticated with social network and then bind with Scoreloop services.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.ISocialNetworkController.Disconnected">
      <summary>
            Event fired when user has correctly unbind from Scoreloop services.
            However it might also be required to manually remove a Scoreloop application from on-line profile of specified social-network.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.ISocialNetworkController.BrowserStatusChanged">
      <summary>
            As only part of the authentication requires displaying a web-browser component, this event informs, when browser should
            be displayed on the screen and when should be hidden. Please not, that hiding the browser, doesn't mean authentication was finished.
            To get instant info about it, subscribe for events: Connected and RequestCancelled.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ISocialNetworkController.SupportedSocialNetworks">
      <summary>
            Gets the collection of currently supported social networks.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ISocialNetworkController.SocialNetwork">
      <summary>
            Gets the indentification of social network being currently processed.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ISocialNetworkProvider">
      <summary>
            Interface providing access to social network dedicated wrappers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ISocialNetworkProvider.GetSocialNetwork(Scoreloop.CoreSocial.API.Model.SocialNetwork)">
      <summary>
            Gets particular social network.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ISocialNetworkProvider.SocialNetworks">
      <summary>
            Gets all integarated social networks.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IUserController">
      <summary>
            The IUserController interface is used to update user information such as the user login and email. The controller is also 
            used in the management of the user's list of friends.
            </summary>
      <remarks>
        <br />
            Basic Usage:
            <br />
            Profile Management:
            <br />
            You can use the IUserController to update the user login and email, as well as updating
            the user context. The user context can be used to pass additional data about the user
            to the server.
            <ol><li>Use the <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" /> to get an instance of IUserController
            by calling the CreateUserController() method.</li><li>Use one of the Update(...) methods to make the changes to the user information.</li><li>Await notification of success by observing if the UserUpdated event fires or not.</li></ol><br />
            Friends Management:
            <ol><li>Use the <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" /> to get an instance of IUserController
            by calling the CreateUserController() method.</li><li>Call the LoadFriends() method to load the friend list for the session user.</li><li>Await notification of success by observing if the FriendsLoaded event fires.</li><li>After a successful server request, the friends array can be accessed. Trying to access
            it before this point will return an empty list.</li><li>Call the AddFriend(User) or RemoveFriend(User) as required.</li><li>Await notification of success by observing if the FriendAdded or FriendRemoved events fire.</li></ol></remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.LoadFriends">
      <summary>
            This method requests the list of friends of the session user
            from the server. After calling this method, wait until the 
            FriendsLoaded event has fired before trying to access the list.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.LoadFriends(Scoreloop.CoreSocial.API.Model.User)">
      <summary>
            This method requests the list of friends for the given <see cref="T:Scoreloop.CoreSocial.API.Model.User" />.
            After calling this method, wait until the FriendsLoaded event has fired
            before trying to access the list.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.AddFriend(Scoreloop.CoreSocial.API.Model.User)">
      <summary>
            This method adds the given <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> to the list of friends
            of the session user. The FriendAdded event will fire if the request
            is successful.
            </summary>
      <param name="user">The user to be added to the friend list.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.RemoveFriend(Scoreloop.CoreSocial.API.Model.User)">
      <summary>
            This method removes the given <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> from the list of
            friends of the session user. The FriendRemoved event will fire
            if the request is successful.
            </summary>
      <param name="user">The user to be removed from the friend list.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.Load(Scoreloop.CoreSocial.API.Model.UserLoadScope)">
      <summary>
            This method will load user information for the current session user.
            You can specify the scope of the information to be loaded, (e.g. "minimal", "detailed", or 
            just the "user context"). The UserLoaded event will fire if the request is successful.
            </summary>
      <param name="scope">The <see cref="T:Scoreloop.CoreSocial.API.Model.UserLoadScope" /></param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.Load(Scoreloop.CoreSocial.API.Model.User,Scoreloop.CoreSocial.API.Model.UserLoadScope)">
      <summary>
            This method will load user information for a given user.
            You can specify the scope of the information to be loaded, (e.g. "minimal", "detailed", or 
            just the "user context"). The UserLoaded event will fire if the request is successful.
            </summary>
      <param name="user">The <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> for whom the information is to be loaded.</param>
      <param name="scope">The <see cref="T:Scoreloop.CoreSocial.API.Model.UserLoadScope" /></param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.Load(Scoreloop.CoreSocial.API.Model.Activity,Scoreloop.CoreSocial.API.Model.UserLoadScope)">
      <summary>
            This method will load user information that is associated with a given activity.
            You can specify the scope of the information to be loaded, (e.g. "minimal", "detailed", or 
            just the "user context"). The UserLoaded event will fire if the request is successful.
            </summary>
      <param name="activity">Activity loaded using <see cref="T:Scoreloop.CoreSocial.API.IActivitiesController" />.</param>
      <param name="scope">The <see cref="T:Scoreloop.CoreSocial.API.Model.UserLoadScope" />.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.Update(System.String,System.String)">
      <summary>
            This method updates the profile of the session user with 
            the given information. The UserUpdated event will fire if the request if successful.
            </summary>
      <param name="login">The new login for the user.</param>
      <param name="email">The new email address for the user.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.Update(System.String,System.String,System.String)">
      <summary>
            This method updates the profile of the session user with 
            the given information. The UserUpdated event will fire if the request if successful.
            </summary>
      <param name="login">The new login for the user.</param>
      <param name="email">The new email address for the user.</param>
      <param name="nationality">New nationality for the user.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.Update(System.String)">
      <summary>
            This method updates the nationality of the session user with
            the given information. The UserUpdated event will fire if the request is successful.
            </summary>
      <param name="nationality">New nationality for the user.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.PreviewProfileImage(System.Windows.Media.Imaging.BitmapSource)">
      <summary>
            This method generates a preview of giving image, matching all requirements for profile image.
            </summary>
      <param name="profileImage">The proposed image for the user.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.UpdateProfileImage(System.Windows.Media.Imaging.BitmapSource)">
      <summary>
            This method updates the profile's image of the session user with 
            the given image. The UserUpdated event will fire if the request is successful.
            </summary>
      <param name="profileImage">The new image for the user.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.UpdateProfileImage(Scoreloop.CoreSocial.API.Model.ISocialNetwork)">
      <summary>
            This method updates the profile's image of the session user with
            profile's image of given social network. User must be connected to that network before trying to update.
            The UserUpdated event will fire if the request is successful.
            </summary>
      <param name="socialNetwork">The social network from which image will be copied.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.DeleteProfileImage">
      <summary>
            This method deletes the profile's image of the session user.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.Update(Scoreloop.CoreSocial.API.Model.User,Scoreloop.CoreSocial.API.Model.Context)">
      <summary>
            This method updates the user context for the given user. The UserUpdated
            event will fire if the request is successful.
            </summary>
      <param name="user">The <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> whose user context will be updated.</param>
      <param name="context">The updated user context</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUserController.Update(Scoreloop.CoreSocial.API.Model.Context)">
      <summary>
            This method updates the user context for the current session user. The UserUpdated
            event will fire if the request is successful.
            </summary>
      <param name="context">The updated context.</param>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IUserController.FriendsLoaded">
      <summary>
            This event is fired each time the user's list of friends is loaded successfully from the server.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IUserController.FriendAdded">
      <summary>
            This event is fired each time a friend is successfully added to the user's list.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IUserController.FriendRemoved">
      <summary>
            This event is fired each time a friend is successfully removed from the user's list.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IUserController.UserLoaded">
      <summary>
            This event is fired each time a user is successfully loaded from the server.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IUserController.UserUpdated">
      <summary>
            This event is fired each time a user (i.e. the user information) is successfully
            updated on the server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IUserController.Friends">
      <summary>
            Gets the list of friends for the user. This list is 
            only available after making a successful request to the server,
            (by calling one of the LoadFriends(...) methods. Only access
            the list after the FriendsLoaded event has fired. Trying to access
            the list before this point will return an empty list.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IUserController.ExpectedImageWidth">
      <summary>
            Gets the expected user image width while uploading.
            If image dimention differs, it will be scaled accordingly.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IUserController.ExpectedImageHeight">
      <summary>
            Gets the expected user image height while uploading.
            If image dimention differs, it will be scaled accordingly.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IUserController.ProposedLogins">
      <summary>
            Gets the array of proposed user logins that are available on Scoreloop.
            This method should only be called if a call to login update failed indicating that login is already taken.
            Otherwise it returns null.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.IUsersController">
      <summary>
            The IUsersController interface is used to request lists of users
            from the server. It can be used to implement a "user search" function
            for example. 
            <br />
            Basic Usage:
            <ol><li>Use the <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" /> to get an instance of IUsersController by calling
            CreateUsersController().</li><li>Call one of the LoadUsers(..) methods below.</li><li>Await notification of success by observing if the UsersLoaded event fired or not.</li><li>After a successful server request, access the Users array. Trying to access it before
            this point will return an empty list.</li></ol></summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUsersController.LoadUser(System.String)">
      <summary>
            This method loads the user that 
            exactly matches the given login string. 
            The UsersLoaded event will fire if the request is successful. 
            </summary>
      <param name="login">The exact login of the user to be matched on the server.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUsersController.LoadUsers(System.String,System.UInt32)">
      <summary>
            This method will load all users whose login begins with
            the supplied query text search string. If the number of 
            matched users on the server exceeds the given limit, the
            returned user list will be empty and the IsOverLimit predicate
            will return true.
            </summary>
      <param name="queryText">The search string to be matched.</param>
      <param name="limit">The limit of permitted matched users on the server.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUsersController.LoadUsers(System.String,Scoreloop.CoreSocial.API.Model.UsersControllerSearchOptions)">
      <summary>
            This method will load all users who match
            the supplied query text search string. Using the <see cref="T:Scoreloop.CoreSocial.API.Model.UsersControllerSearchOptions" />
            argument you can specify whether the search string should match against the user login or email, 
            and whether it should match exactly, or be a partial match, (either as prefix or suffix). 
            The UsersLoaded event will fire if the request succeeds.
            </summary>
      <param name="queryText">The search string.</param>
      <param name="options">Additional search options.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.IUsersController.LoadUsers(System.Collections.Generic.IEnumerable{Scoreloop.CoreSocial.API.Model.User},Scoreloop.CoreSocial.API.Model.UserLoadScope)">
      <summary>
            This method will load details for all specified users.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.IUsersController.UsersLoaded">
      <summary>
            This event is fired after a list of users is successfully loaded from the server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IUsersController.Users">
      <summary>
            Provides accesst to the list of users that is returned from
            the server. You should only try to access this after first calling
            one of the LoadUsers(...) methods and after the UsersLoaded event
            has fired. Trying to access it before then will return an empty list.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IUsersController.IsOverLimit">
      <summary>
            You can specify a "search limit" with some of the LoadUsers(...)
            methods. If a limit is specified, and the number of positive matches
            found on the server exceeds this limit:
            <ul><li>This method will return <c>true</c>.</li><li>The list of users returned by the server will be empty.</li></ul><br /></summary>
      <returns>
        <c>true</c> if the number of positive matches on the server is
            greater than a limit specified by you, otherwise <c>false</c>.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IUsersController.Limit">
      <summary>
            Gets the limit set during the last request made by the controller.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IUsersController.QueryText">
      <summary>
            Gets the query that was used to locate users in the last
            request made by the controller.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.IUsersController.Count">
      <summary>
            Gets the number of users that were loaded or are available to load in case limit is too low.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Achievement">
      <summary>
            The Achievement class models whether an Award has be achieved by a user or not. You query this state by testing the IsAchieved property.
            If it equals true, then the award has been achieved by the user, if it equals false then it has not.
            </summary>
      <remarks>
        <p>
            To achieve an award a user must reach an arbitrary value set by the developer, (this is 1 in most cases).
            This Award.AchievingValue can be reached in stages, if desired. Both the "achieving value" of an
            Award and the number of stages it takes to reach it must be configured by the developer on https://developer.scoreloop.com.
            After awards are configured on the developer website, Scoreloop generates an awards bundle,
            (sl_awards_bundle.zip), that must be downloaded and added to your game project. This bundle provides local access to awards
            and achievements on the client device.
            </p>
        <p>
            You can mark an Achievement as being unlocked in one of two ways:
            <ul><li>In a single step with a call to the method SetAchieved() on IAchievementController</li><li>Or by incrementing a value in stages until it equals the "Award.AchievingValue" for the award.</li></ul></p>
        <p>
            As an example, a developer might configure an award so that the "achieving value" equals 10, and that this may be reached
            in 10 separate incremental stages. In the gameplay, this might mean that the user could achieve the award by
            collecting 10 secret jewels - finding a single jewel would represent completing one of the configured incremental stages.
            After the tenth jewel has been found then the user has reached the configured "achieving value" and achieves the award.
            </p>
        <p>
            After an award is achieved by one of the two approaches mentioned above, you have
            to inform Scoreloop by submitting the relevant Achievement objects with the  help of an IAchievementController.
            </p>
            To retrieve Achievement objects in the first place, use an IAchievementsController.
            </remarks>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Entity">
      <summary>
            Base class for model item of Scoreloop data.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Entity.#ctor(System.String)">
      <summary>
            Init constructor.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Entity.HasIdenticalID(System.String)">
      <summary>
            Checks if there is another object with the same ID.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Entity.HasIdentical(System.String,System.String,System.StringComparison)">
      <summary>
            Checks if two string-fields are equal.
            If both fields are null, we assume that the instances are different (in case we compare two new Score objects by ID, which were not yet submitted to the server).
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Entity.Equals(Scoreloop.CoreSocial.API.Model.Entity)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Entity.Equals(System.Object)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Entity.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Entity.CompareTo(Scoreloop.CoreSocial.API.Model.Entity)">
      <summary>
            Compares two specified Entity objects and returns an integer that indicates their relative position in the sort order.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Entity.ID">
      <summary>
            Gets the Scoreloop-assigned ID of this object.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.IMessageTarget">
      <summary>
            Interface implemented by all Scoreloop Entities that can have a message associated.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.IMessageTarget.ID">
      <summary>
            Gets the unique identification of the Scoreloop Entity that can have the message associated with it.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.IMessageTarget.Name">
      <summary>
            Gets the name of the Scoreloop entity that can have the message associated with it.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.IMessageTarget.RequiresGame">
      <summary>
            Gets an indication, if current target is bind with current game or global to Scoreloop services.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Achievement.Award">
      <summary>
            Gets the award information associated with the achievement.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Achievement.AchievedDate">
      <summary>
            Gets the date, when achievement was achieved for the first time.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Achievement.NeedsSubmit">
      <summary>
            Gets the indication if the achievement was updated locally and needs synchronization with server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Achievement.Value">
      <summary>
            Gets the current progress value.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Achievement.Progress">
      <summary>
            Returns achievement progress [0..1]
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Achievement.IsAchieved">
      <summary>
            Gets an indication if given achievement is achieved or not.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Achievement.ImageName">
      <summary>
            Gets the image name depending on its achieved state.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Achievement.ImageURL">
      <summary>
            Gets the image URL depending on its achieved state (if only custom images are uploaded using developer.scoreloop.com).
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.AchievementList">
      <summary>
            The collection of the Achievement objects available in the game.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.AchievementList.GetAchievement(System.String)">
      <summary>
            Returns an achievement for given awardID.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AchievementList.AwardList">
      <summary>
            Gets the list of awards this list of achievements is build on.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AchievementList.Achievements">
      <summary>
            Gets the collection of achievements for current user.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AchievementList.LastSynchronizationDate">
      <summary>
            Gets the date, last synchronization was performed.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AchievementList.NeedsSynchronization">
      <summary>
            Gets an indication, if achievements were at least downloaded from server once,
            or any of them has recently been completed without submission.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AchievementList.AchievedCount">
      <summary>
            This gets the number of achievements that have been "achieved" by the user.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AchievementList.Item(System.String)">
      <summary>
            Returns an achievement for given awardID.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AchievementList.Item(System.Int32)">
      <summary>
            Returns an achievement at given index or null if out-of-bound.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ActivitiesList">
      <summary>
            Enumerates the types of different activities lists that 
            are available. You need to pass an activities list to the
            LoadActivities(ActivitiesList, Int32) method of the IActivitiesController.
            This specifies the type of list that you want to request from the server.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivitiesList.General">
      <summary>
            The general activities list.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivitiesList.Friends">
      <summary>
            Specifies a list of activities associated with 
            the Scoreloop users in your friends list, (the activities
            will be for all games in which your friends are active). 
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivitiesList.Game">
      <summary>
            Specifies a list of activities associated with the current 
            game. The activities will relate to all users of the game.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Activity">
      <summary>
            The Activity class is used to model a Scoreloop-related activity for a user.
            </summary>
      <remarks>
            Activities will relate to one of the following Scoreloop events:
            <ul><li>a Scoreloop Score,</li><li>a Scoreloop Challenge,</li><li>adding a friend to your friend list,</li><li>or none.</li></ul>
            Activity objects contain a message about the Scoreloop event the Activity relates to.
            An example message, (relating to a score-based Scoreloop event), might read: 
            "Player001 has scored 50 points in the game SLDemoCore".
            <br />
            Basic Usage:
            To retrieve the message associated with a given Activity, do the following:
            <ol><li>Use the ScoreloopClienGet an instance of the IActivitiesController, or re-use an existing one.</li><li>Use the controller to call the LoadActivities(ActivitiesList, Int32) method. The ActivitiesList specifies
            the type of activities you want to request from the server.</li><li>Await notification of success by observing the the ActivitiesLoaded event of the IActivitiesController fires or not.</li><li>After a successful server response, use the IActivitiesController to access the Activities array.</li><li>Select the desired Activity from the retrieved list.</li><li>Access the Message property of the selected Activity.</li></ol></remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Activity.GetImageURL(Scoreloop.CoreSocial.API.Model.ActivityImageVariant)">
      <summary>
            Gets the image URL for the given variant.
            </summary>
      <param name="variant">You can vary the size of the image whose URL you 
            want, by passing different types here, (e.g. small, medium, large).</param>
      <returns>The requested image URL.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.Message">
      <summary>
            Gets the activity message.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.Date">
      <summary>
            Gets the date to which the activity relates.
            </summary>
      <returns>A DateTime object corresponding to the date on which the activity happened.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.DateAsString">
      <summary>
            Gets the date description using more "relative" 
            descriptions. For example, this method might return
            a description of when the activity happened such as:
            <ul><li>"a very long time ago",</li><li>"just now"</li><li>or "a few hours ago",</li></ul>
            among others.
            <br />
            The string descriptions are returned based
            on an analysis between the Date the activity happened on, 
            and the current date.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.TargetType">
      <summary>
            Gets the activity target, e.g. a Scoreloop Score, Challenge, 
            or Achievement.
            </summary>
      <returns>An ActivityTargetType.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.Game">
      <summary>
            Gets the game to which the activity relates.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.HasValidGameID">
      <summary>
            Gets the indication, if current ID is associated with any game.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.User">
      <summary>
            Gets the ID of the user to whom the activity relates.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.HasValidUserID">
      <summary>
            Checks if given activity has valid user associated.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.TargetID">
      <summary>
            Gets the ID of the target. Also related to TargetType property.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.SmallImageURL">
      <summary>
            Gets the small image URL associated with the activity.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.MediumImageURL">
      <summary>
            Gets the medium image URL associated with the activity.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Activity.LargeImageURL">
      <summary>
            Gets the large image URL associated with the activity.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ActivityImageVariant">
      <summary>
            Enumeration describing variants of images associated with the activity.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityImageVariant.Small">
      <summary>
            Small-size image.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityImageVariant.Medium">
      <summary>
            Medium-size image.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityImageVariant.Large">
      <summary>
            Large-size image.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ActivityTargetType">
      <summary>
            Enumerates the types of Activity types available.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityTargetType.None">
      <summary>
            Specifies that the activity does not have a specified target.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityTargetType.Challenge">
      <summary>
            The activity relates to a Scoreloop Challenge.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityTargetType.Score">
      <summary>
            The activity relates to a Scoreloop Score.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityTargetType.Achievement">
      <summary>
            The activity relates to a Scoreloop Achievement.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityTargetType.Friends">
      <summary>
            The activity relates to an addition to a user's friend-list.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityTargetType.PromotionPayment">
      <summary>
            The activity relates to a promotional payment, (e.g. a new user to a game is sometimes credited with an introductory amount of in-game currency as a promotional tool.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityTargetType.Facebook">
      <summary>
            The activity relates to Facebook messaging.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ActivityTargetType.Twitter">
      <summary>
            The activity relates to Twitter messaging.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Award">
      <summary>
            The Award class models an award that is available in a game application and that may be acheived by a user.
            </summary>
      <remarks>
            To achieve an award a user must reach an arbitrary value set by the developer, (this is 1 in most cases).
            This "achieving value" can be reached in stages, if desired. Both the "achieving * value" of an Award
            and the number of stages it takes to reach it must be configured on https://developer.scoreloop.com.
            After awards are configured on the developer website, Scoreloop generates an awards bundle,
            (sl_awards_bundle.zip), that must be downloaded and added to your game project. This bundle provides local (offline)
            access to awards and achievements on the client device.
            
            Note that Award instances are not created directly, but rather are specified declaratively in this generated awards bundle.
            
            As an example, an Award might be configured with the following properties:
            - Achieving value: 10
            - Counter range: (0,10)
            - Initial value: 0
            
            In the gameplay, this might mean that the user must collect 10 secret jewels in order to unlock the award. The initial value
            is equal to 0 (= state before any jewels are found). With each jewel found this value is incremented by 1. When the value
            reaches 10 (= achieving value) the Award is achieved (or unlocked) by the user.
            </remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Award.ToString">
      <summary>
            Returns the System.String representation of this object.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Award.CompareTo(Scoreloop.CoreSocial.API.Model.Award)">
      <summary>
            Compares two specified Entity objects and returns an integer that indicates their relative position in the sort order.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.CounterRange">
      <summary>
            This method returns the range of incremental stages which must be passed before the Award can be achieved.
            This range may be (0,1).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.Importance">
      <summary>
            Gets the sorting importance of this award to appear on the list.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.Reward">
      <summary>
            Gets the money amount user will be rewarded, when this award is achieved.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.AchievingValue">
      <summary>
            This method returns the final value for the award.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.InitialValue">
      <summary>
            This method returns the starting value for the award.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.AchievedImageName">
      <summary>
            Gets the image name for achieved award.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.AchievedImageURL">
      <summary>
            Gets the image public URL (if defined on developer.scoreloop.com) for achieved award.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.UnachievedImageName">
      <summary>
            Gets the image name for non-achieved award.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.UnachievedImageURL">
      <summary>
            Gets the image public URL (if defined on developer.scoreloop.com) for unachieved award.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.Description">
      <summary>
            Retuns the localized description for the award.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Award.Title">
      <summary>
            Retuns the localized title for the award.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.AwardList">
      <summary>
            The collection of the Award objects available in the game.
            </summary>
      <remarks>
            Basic Usage:
            -# The local (sync with server on a request) list is available through ScoreloopClient instance.
            -# Get an instance of IAchievementsController.
            -# Use the controller to request a list of achievements from the server.
            -# After a successful server request, use the controller to call IAchievementsController.Awards property. This will return an array of awards.
            </remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.AwardList.GetAward(System.String)">
      <summary>
            Gets the award with given identifier.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AwardList.Awards">
      <summary>
            Gets the list of awards.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AwardList.Count">
      <summary>
            Gets the number of awards.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AwardList.Identifiers">
      <summary>
            Gets the list of awards identifiers.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AwardList.DefaultLanguageID">
      <summary>
            Gets or sets the currently default language for awards descriptions and titles.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AwardList.LanguageIDs">
      <summary>
            Gets the collection of available localized language identifiers.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AwardList.Item(System.String)">
      <summary>
            Gets the award with given identifier.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AwardList.Item(System.Int32)">
      <summary>
            Gets the award with given identifier.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AwardList.DefaultAchievedImageName">
      <summary>
            Gets the name of the default image for achieved award.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.AwardList.DefaultUnachievedImageName">
      <summary>
            Gets the name of the default image for unachieved award.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.BrowserStatus">
      <summary>
            Web-browser statuses requested while performing authentication into social network.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.BrowserStatus.ShouldAppear">
      <summary>
            Web-browser should be visible. 
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.BrowserStatus.ShouldDisappear">
      <summary>
            Web-browser should be hidden. 
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Challenge">
      <summary>
            The Challenge class models all aspects of a Scoreloop challenge.
            </summary>
      <remarks>
            A challenge is a competitive gaming round between Scoreloop users. 
            The user who starts the challenge is called the "contender". The
            user who accepts the challenge is called the "contestant". 
            
            Challenge objects are not created directly. You must use an
            instance of <see cref="T:Scoreloop.CoreSocial.API.IChallengeController" /> to create one.
            
            To create a challenge:
            <ol><li>Use the <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" /> to create an instance of <see cref="T:Scoreloop.CoreSocial.API.IChallengeController" /> or re-use an existing one.</li><li>Use the IChallengeController to create the challenge by calling one of its LoadChallenge methods.</li></ol><br /></remarks>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.EntityWithContext">
      <summary>
            Base class for all entities that provide access to context info.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.EntityWithContext.Context">
      <summary>
            Gets the context associated with this entity.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Challenge.IsPlayableFor(Scoreloop.CoreSocial.API.Model.User)">
      <summary>
            Predicate used to check whether the challenge can be played
            by a given user. The challenge is playable provided the
            <see cref="T:Scoreloop.CoreSocial.API.Model.ChallengeState" /> is either "Opened" or "Assigned"
            and provided the user passed as an argument here is not the
            challenge contender.
            </summary>
      <returns>
        <c>true</c> if the user may play the challenge, otherwise <c>false</c></returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.Contender">
      <summary>
            Gets and sets the challenge contender. The contender
            is the Scoreloop user who starts the challenge.
            </summary>
      <returns>The <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> who started the challenge.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.Contestant">
      <summary>
            Gets and sets the challenge contestant. The contestant
            is the Scoreloop user who accepts the challenge.
            </summary>
      <returns>The <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> who accepts the challenge.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.ContenderScore">
      <summary>
            Gets and sets the score of the contender.  
            </summary>
      <returns>The <see cref="T:Scoreloop.CoreSocial.API.Model.Score" /> of the user who started the challenge.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.ContestantScore">
      <summary>
            Gets and sets the score of the contestant. 
            </summary>
      <returns>The <see cref="T:Scoreloop.CoreSocial.API.Model.Score" /> of the user who accepted the challenge.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.Mode">
      <summary>
            Gets and sets the mode of the challenge. 
            The mode refers to a different gameplay setting 
            such as difficulty or speed, (e.g. mode 0 = slow, mode 1 = normal, mode 3 = fast).
            </summary>
      <returns>The mode of the challenge.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.Level">
      <summary>
            Gets and sets the challenge level, (e.g. Level 1, Level 2, etc).   
            </summary>
      <returns>The level of the challenge.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.Stake">
      <summary>
            Gets and sets the challenge stake. The stake is
            the amount of in-game currency that both players
            must contribute in order to take part in the challenge.
            The size of the stake is decided by the user who starts
            the challenge (the contender). 
            </summary>
      <returns>A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object - the challenge stake.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.Prize">
      <summary>
            Provides access to the challenge prize. 
            This is calculated as (1.5 * challenge stake)
            and is awarded to the winner of the challenge.
            The original stake is not returned.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.Game">
      <summary>
            Gets the game object associated with this challenge (in most cases, the currently running game or null).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.State">
      <summary>
            Provides access to the challenge state, (e.g. opened, 
            accepted, rejected, etc.).
            </summary>
      <returns>The <see cref="T:Scoreloop.CoreSocial.API.Model.ChallengeState" /></returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.Winner">
      <summary>
            Returns the winner of the challenge. 
            </summary>
      <returns>The <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> who won the challenge.
            Will return null if the challenge has not yet been won.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.IsWinner">
      <summary>
            Predicate used to check if the current session user is the
            winner of the challenge.
            </summary>
      <returns>
        <c>true</c> if the session user is the winner, otherwise <c>false</c></returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.Loser">
      <summary>
            Returns the loser of the challenge.  
            </summary>
      <returns>The <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> who lost the challenge. Will return null if 
            the challenge has not yet been lost.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.IsLoser">
      <summary>
            Predicate used to check if the current session user is the
            loser of the challenge.
            </summary>
      <returns>
        <c>true</c> if the session user is the loser, otherwise <c>false</c></returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.CreationDate">
      <summary>
            Provides access to when the challenge was created. 
            </summary>
      <returns>
        <see cref="T:System.DateTime" /> object corresponding to when the
            challenge was created.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.ExpirationDate">
      <summary>
            Provides access to the date on which the challenge will expire.
            The challenge cannot be accepted after this date. 
            You can configure for how long your challenges will remain
            valid at https://developer.scoreloop.com.
            </summary>
      <returns>
        <see cref="T:System.DateTime" /> object corresponding to when the challenge will expire.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.LastUpdateDate">
      <summary>
            Provides access to the date on which the challenge was last
            updated.
            </summary>
      <returns>
        <see cref="T:System.DateTime" /> object corresponding to when the challenge was last updated.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Challenge.CompletionDate">
      <summary>
            Provides access to the date on which the challenge was completed.
            The challenge is complete when the second player, (the contestant), plays
            the challenge and submits their score to Scoreloop.
            </summary>
      <returns>
        <see cref="T:System.DateTime" /> object corresponding to when the challenge was completed.</returns>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ChallengesList">
      <summary>
            Enumerates the types of challenge lists that can be requested from the server using a <see cref="T:Scoreloop.CoreSocial.API.IChallengesController" />.
            </summary>
      <remarks>
            Available values:
            <ul><li>An "Open" list requests all challenges that are available for a user to play. 
            If any direct challenges exist for the user, these will be returned first.</li><li>The "History" list requests the challenge history for the user, that is, all
            challenges played, rejected, or currently underway.</li></ul></remarks>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengesList.Open">
      <summary>
            The "open" challenge list is the list of all challenges
            that are available for the user to play.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengesList.History">
      <summary>
            The "history" challenge list is the list of challenges that are
            associated with a user, (challenges currently underway, challenges played and lost, etc).
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ChallengeState">
      <summary>
            Enumerates the state of the challenge.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengeState.Assigned">
      <summary>
            Denotes a "direct" challenge, (that is, a challenge
            that has been directly assigned to a Scoreloop user). 
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengeState.Opened">
      <summary>
            Indicates that the challenge has been created and 
            that the contender has already played.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengeState.Done">
      <summary>
            Indicates that the challenge can no longer be accepted. 
            This represents the aggregrate of several states.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengeState.Completed">
      <summary>
            Indicates that both the contender and contestant have
            both played the challenge, submitted the scores to Scoreloop,
            and a winner has been declared.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengeState.Created">
      <summary>
            Indicates the initial starting state of the challenge. 
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengeState.Invited">
      <summary>
            Indicates that the contender has played the challenge and
            invited a friend, who is a non-Scoreloop user, to join 
            Scoreloop and accept the challenge. The non-Scoreloop user
            will be notified by email or through a social network provider.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengeState.Accepted">
      <summary>
            Indicates that the challenge has been accepted by the
            contestant.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengeState.Rejected">
      <summary>
            Indicates that the challenge has been rejected by the 
            contestant. Only direct challenges that have been assigned
            to a specific user can be rejected.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengeState.Cancelled">
      <summary>
            Indicates that the challenge has been cancelled. This represents
            the aggregate of several states. 
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ChallengeState.Invalid">
      <summary>
            Indicates that the challenge is invalid in some way.
            For example, a challenge will be invalid if the 
            contender and contestant are the same user. 
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ChallengeStatistics">
      <summary>
            Class storing statistics for user challenges.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ChallengeStatistics.HasValues">
      <summary>
            Gets the indication if given object has data loaded from server or is just a placeholder filled with zeros.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ChallengeStatistics.Count">
      <summary>
            Gets the number of played challenges.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ChallengeStatistics.ContenderCount">
      <summary>
            Gets the number user was a challenge contender.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ChallengeStatistics.ContestantCount">
      <summary>
            Gets the number user was a challenge contestant.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ChallengeStatistics.Won">
      <summary>
            Gets the number of challenges won.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ChallengeStatistics.Lost">
      <summary>
            Gets the number of challenges lost.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.CoinPack">
      <summary>
            The CoinPack class models all aspects of purchasable virtual currency packs in Scoreloop.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.GameItem">
      <summary>
            The GameItem class models the downloadable content of the game.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GameItem.DefaultImageKey">
      <summary>
            Gets the name of the key for default image for this item.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.GameItem.GetImageUrl(System.String)">
      <summary>
            Gets the image URL for given key or null if wrong key.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.Game">
      <summary>
            Gets the game, this game item is associated with.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.ProductID">
      <summary>
            Gets the external product identifier defined for this game item in Admin panel.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.Name">
      <summary>
            Gets the name of this game item.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.Kind">
      <summary>
            Gets the consumable kind of this item.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.MetaData">
      <summary>
            Gets the metadata associated with this item in Admin panel.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.Tags">
      <summary>
            Gets the list of tags associated with this item in Admin panel.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.ContentType">
      <summary>
            Gets the MIME type of the content associated with this game item.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.ContentSize">
      <summary>
            Gets the size of content of this game item.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.DownloadURL">
      <summary>
            Gets the download URL for this item.
            Since the URL is short-lived (max 5min), this property is only available for items, for which the URL was generated first.
            To generate it, see the RequestItemDownloadURL() method of  <see cref="T:Scoreloop.CoreSocial.API.IGameItemController" />.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.LocalPath">
      <summary>
            Gets the path assigned by the developer to this game item during the downloading process.
            It can point to anything and is not changed by Scoreloop anyhow.
            Since it is in developers responsibility to store the content of downloaded game item,
            Scoreloop only stores the path, so that developer can re-read the content on next application launch.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.Description">
      <summary>
            Gets the description of this game item.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.PurchaseDate">
      <summary>
            Gets the date of purchase of game item.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.PriceTier">
      <summary>
            Gets the price information of this item.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.IsCollectable">
      <summary>
            Reports, whether this item can be bought multiple times. Note, that not all collectible items have to be also consumable.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.Content">
      <summary>
            Gets the content of the item.
            This value contains data only on a special request.
            To load it, see the DownloadItem() method of  <see cref="T:Scoreloop.CoreSocial.API.IGameItemController" />.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.ImageURL">
      <summary>
            Gets the URL to the default image of this game item (or null if doesn't exist).
            It uses the value of DefaultImageKey constant ("default") to find the image among all.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItem.AvailableImageKeys">
      <summary>
            Gets the list of available imag lists.
            This property is never null.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.CoinPack.Value">
      <summary>
            Amount of virtual currency, that user will be granted, after buying this coin pack.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Context">
      <summary>
            Class representing context dictionary for Scoreloop entities.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.IContextItem">
      <summary>
            Interface implemented by items of Context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.IContextItem.Add(System.String,System.String)">
      <summary>
            Adds new named value to the context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.IContextItem.Add(System.String,System.Int32)">
      <summary>
            Adds new named value to the context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.IContextItem.AddItem(System.String,System.Object)">
      <summary>
            Adds new named value to the context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.IContextItem.AddObject(System.String)">
      <summary>
            Adds new named named object to the context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.IContextItem.Contains(System.String)">
      <summary>
            Checks if given named value belongs in context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.IContextItem.Get(System.String)">
      <summary>
            Gets named object from context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.IContextItem.Remove(System.String)">
      <summary>
            Removes named value from context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.IContextItem.Clear">
      <summary>
            Removes all values from context.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.IContextItem.Count">
      <summary>
            Gets number of items stored.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.IContextItem.Item(System.String,System.String)">
      <summary>
            Gets the named string from context.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.IContextItem.Item(System.String,System.Int32)">
      <summary>
            Gets the named int from context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.#ctor(System.Int32)">
      <summary>
            Initializes context with given version.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.Add(System.String,System.String)">
      <summary>
            Adds new named value to the context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.Add(System.String,System.Int32)">
      <summary>
            Adds new named value to the context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.AddItem(System.String,System.Object)">
      <summary>
            Adds new named value to the context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.AddObject(System.String)">
      <summary>
            Adds new named named object to the context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.Contains(System.String)">
      <summary>
            Checks if given named value belongs in context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.Get(System.String)">
      <summary>
            Gets named object from context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.Remove(System.String)">
      <summary>
            Removes named value from context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.Clear">
      <summary>
            Removes all values from context.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Context.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the stored values collection.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Context.Version">
      <summary>
            Gets the version of the context.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Context.Count">
      <summary>
            Gets number of items stored.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Context.Item(System.String,System.String)">
      <summary>
            Gets the named string from context.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Context.Item(System.String,System.Int32)">
      <summary>
            Gets the named int from context.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Device">
      <summary>
            Class describing the device user is playing on.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Device.HasIdenticalUniqueID(System.String)">
      <summary>
            Checks if given string is identical to stored UniqueID.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Device.Equals(Scoreloop.CoreSocial.API.Model.Device)">
      <summary>
            Compares the object with another. Returns true if both instances are type of Device and have identical UniqueID, SystemName and SystemVersion.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Device.Equals(System.Object)">
      <summary>
            Compares the object with another. Returns true if both instances are type of Device and have identical UniqueID, SystemName and SystemVersion.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Device.GetHashCode">
      <summary>
            Gets the hash-code for this object calculated as hash-code of the UniqueID.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Device.ToString">
      <summary>
            Returns the string representation of this object.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Device.Name">
      <summary>
            Gets the name of the device.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Device.SystemName">
      <summary>
            Gets the OS name.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Device.SystemVersion">
      <summary>
            Gets the OS version.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Device.Model">
      <summary>
            Gets the device model.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.DeviceCreatedEventArgs">
      <summary>
            Arguments passed along with an event, that user has been for the first time
            authenticated at Scoreloop services and his device has been registered.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.DeviceCreatedEventArgs.Client">
      <summary>
            Gets the ScoreloopClient associated with this event.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.DeviceState">
      <summary>
            States of the user's device.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.DeviceState.Unknown">
      <summary>
            Unknown state.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.DeviceState.Freed">
      <summary>
            User has been unbind from given device.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.DeviceState.Failed">
      <summary>
            Device is broken.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.DeviceState.Verified">
      <summary>
            Device is verified and working fine.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.DeviceState.Created">
      <summary>
            Device has been associated with new user.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Game">
      <summary>
            The Game class models your game application. An instance of Game
            is created transparently when you instantiate the <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" />.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Game.ToString">
      <summary>
            Returns the System.String representation of this object.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Game.Version">
      <summary>
            Gets the most recent version of the game.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Game.Name">
      <summary>
            Gets the name of your game. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Game.PublisherName">
      <summary>
            Gets the name of the publisher of your game. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Game.Description">
      <summary>
            Gets a description of your game. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Game.ModeCount">
      <summary>
            Gets the number of modes you have defined for your game. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Game.ImageURL">
      <summary>
            Gets the URL of the image you have associated with your game.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Game.DownloadURL">
      <summary>
            Gets the URL from where you can download your game. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Game.ScoreFormatterContent">
      <summary>
            Gets the raw input given to ScoresFormatter.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Game.ScoreFormatter">
      <summary>
            Gets the ScoreFormatter assigned to this game.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.GameItemDownloadedEventArgs">
      <summary>
            Arguments passed together with game item successfully downloaded notification.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.RequestControllerEventArgs`1">
      <summary>
            Event arguments class that brings information about request controller
            that was the source of the message.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.RequestControllerEventArgs`1.Controller">
      <summary>
            Gets the reference to the request controller.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.RequestControllerEventArgs`1.Error">
      <summary>
            Gets the reference to the error of last request (if really finished with error).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItemDownloadedEventArgs.GameItem">
      <summary>
            Gets the game item for which the content was downloaded.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItemDownloadedEventArgs.LocalPath">
      <summary>
            Gets or sets the external-code local path associated with given game item.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.GameItemKind">
      <summary>
            Enumeration defining different behavior kinds of purchasable game items.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GameItemKind.Nonconsumable">
      <summary>
            Item will be permanently assigned to the user.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GameItemKind.ConsumableCoinPack">
      <summary>
            Item will increase user's balance once and then it could be acquired again.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.GameItemList">
      <summary>
            The collection of the GameItem objects downloaded in the game.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.GameItemList.AddItem(Scoreloop.CoreSocial.API.Model.GameItem,System.String)">
      <summary>
            Remembers in persistent storage that given item has been stored at given location.
            Content of the item is no where stored anyway. This belongs to external code responsibility.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.GameItemList.Contains(System.String)">
      <summary>
            Checks if given game items has any local info associated.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.GameItemList.GetItem(System.String)">
      <summary>
            Gets info about local storage.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.GameItemList.GetItemIndex(System.String)">
      <summary>
            Gets index of an item with local info associated.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.GameItemList.Clear">
      <summary>
            Removes local storage association.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItemList.Items">
      <summary>
            Gets the list of info about downloaded game items.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.GameItemList.Item(System.String)">
      <summary>
            Gets the item with given ID.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.GameItemsList">
      <summary>
            Enumerates the types of game-items lists that can be requested from the server using a <see cref="T:Scoreloop.CoreSocial.API.IGameItemsController" />.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GameItemsList.Local">
      <summary>
            Locally stored info about downloaded game items.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GameItemsList.CoinPacks">
      <summary>
            Coin packs.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GameItemsList.DownloadableContent">
      <summary>
            Regular downloadable game items for this game.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GameItemsList.DownloadableContentForAllGameVersions">
      <summary>
            Regular downloadable game items for all versions of this game.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.GamesList">
      <summary>
            Types of games list, that could be browsed.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GamesList.All">
      <summary>
            All games for all platforms.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GamesList.UserGames">
      <summary>
            All games assigned to specified user.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GamesList.FriendsWithTheSameDevice">
      <summary>
            Specified friend games that are playable for current device.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GamesList.FeaturedForMyDevice">
      <summary>
            Featured games that are playable for current device.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GamesList.PopularForMyDevice">
      <summary>
            Popular games that are playable for current device.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.GamesList.NewForMyDevice">
      <summary>
            New games that are playable for current device.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.HttpRequest">
      <summary>
            Class allowing to perform GET HTTP requests.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.HttpRequest.Get">
      <summary>
            Loads asynchronoulsy data via HTTP GET.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.HttpRequest.Cancel">
      <summary>
            Cancells current on-going request.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.Model.HttpRequest.Loaded">
      <summary>
            Event fired each time content at given URL has been successfully loaded.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.Model.HttpRequest.Failed">
      <summary>
            Event fired each time content at given URL was unavailable.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.HttpRequest.Timeout">
      <summary>
            Gets or sets the timeout value.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.HttpRequest.Tag">
      <summary>
            Gets or sets any user-specific tag associated with this object.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.HttpRequest.NetworkCredential">
      <summary>
            Gets or sets the network credentials for basic authentication.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.HttpRequestEventArgs">
      <summary>
            Arguments passed along success/fail events of HttpRequest.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.HttpRequestEventArgs.Request">
      <summary>
            Gets original request issuing the event.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.HttpRequestEventArgs.StringData">
      <summary>
            Gets the downloaded data represented as string.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.HttpRequestEventArgs.BinaryData">
      <summary>
            Gets the downloaded data as raw binary.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.HttpRequestEventArgs.StatusCode">
      <summary>
            Gets the response status code.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.HttpRequestEventArgs.StatusDescription">
      <summary>
            Gets the response status description.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.IMessageReceiver">
      <summary>
            Interface implemented by all types of message receivers.
            It is implemented by email receiver and all social providers.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.IMessageReceiver.ID">
      <summary>
            Gets the unique identifier for the message broadcasting network.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.IMessageReceiver.IsConnected">
      <summary>
            Gets the indication if current user is connected to that message broadcasting network.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ISocialNetwork">
      <summary>
            Interface implemented by each integrated social network.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ISocialNetwork.Name">
      <summary>
            Gets the name of the social network.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ISocialNetwork.Type">
      <summary>
            Gets the type of social network.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ISocialNetwork.ImageSource">
      <summary>
            Gets the image source type associated with this social network.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ISocialNetwork.URL">
      <summary>
            Gets the social network homepage URL.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ISocialNetwork.Version">
      <summary>
            Gets the version of the social network.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.IWebBrowser">
      <summary>
            Interface defining minimal subset of functionalities required by Scoreloop to display web content.
            Required by social providers and payments.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.IWebBrowser.NavigateTo(System.String)">
      <summary>
            Requests navigation to given URL.
            Different threads might try to call it, so internally it should switch to UI-thread if required.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.Model.IWebBrowser.Navigated">
      <summary>
            Event fired each time web browser navigated to any page (especially the one requested by call to Navigate() method).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.IWebBrowser.Object">
      <summary>
            Native web control object. This value is returned by the social providers related Scoreloop API.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.LicenseGuard">
      <summary>
            Class exposing licensing operations and information.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.LicenseGuard.Accept">
      <summary>
            Accepts EULA and allows further Scoreloop action execution.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.LicenseGuard.Reject">
      <summary>
            Rejects EULA and cancels all requests.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.LicenseGuard.IsLicenseAccepted">
      <summary>
            Gets the indication if user already accepted EULA.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.LicenseGuard.EULA">
      <summary>
            Gets the SDK embedded license text.
            Might be null or might not be the latest one.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.LicenseGuard.URL">
      <summary>
            URL where the EULA is available on-line.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.LicenseGuardEventArgs">
      <summary>
            Arguments passed along licensing events.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.LicenseGuardEventArgs.IsLicenseAccepted">
      <summary>
            Gets an indication if user already accepted the license.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.LicenseGuardEventArgs.Guard">
      <summary>
            Gets reference to object providing licensing actions and information.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Message">
      <summary>
            Message object that can be associated with a Scoreloop entity.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Message.Add(Scoreloop.CoreSocial.API.Model.IMessageReceiver,Scoreloop.CoreSocial.API.Model.User)">
      <summary>
            Adds new receiver for this message.
            Please not, that messages submitted to Scoreloop can't be modified anymore.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Message.Add(Scoreloop.CoreSocial.API.Model.IMessageReceiver,Scoreloop.CoreSocial.API.Model.User[])">
      <summary>
            Adds new receivers for this message.
            Please not, that messages submitted to Scoreloop can't be modified anymore.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Message.Add(System.String)">
      <summary>
            Adds non-Scoreloop user email to receive this message.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Message.Add(System.String[])">
      <summary>
            Adds non-Scoreloop user emails to receive this message.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Message.RemoveAll">
      <summary>
            Removes all receivers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Message.Clear">
      <summary>
            Removes all receivers.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Message.Target">
      <summary>
            Gets or sets the message target (game, score, challenge, achievement object).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Message.Text">
      <summary>
            Gets or sets the message text.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Message.Receivers">
      <summary>
            Gets the collection of receivers assigned to this message (email tranport layer, or any other external social network).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Message.ReceiverCount">
      <summary>
            Gets the number of receivers.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Message.IsPostAllowed">
      <summary>
            Gets the indication if all receivers are logged in and are ready to send the message.
            Logging must be performed before (as this might display some UI elements, e.g.: Facebook, Twitter will render own WebPage...).
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Money">
      <summary>
            Instance of the Money class are used to represent amounts of in-game currency.
            </summary>
      <remarks>
            Money objects are used in Scoreloop challenges as the challenge stake and
            are awarded to the winners of challenges as the challenge prize.
            
            Basic Usage:
            
            To create a money object you must use one of the classes that implement the
            <see cref="T:Scoreloop.CoreSocial.API.IStakeProvider" /> interface to call the CreateStake(double) method.
            Both the <see cref="T:Scoreloop.CoreSocial.API.IChallengeController" /> and <see cref="T:Scoreloop.CoreSocial.API.Model.Session" /> classes
            implement this interface. The methods below allow you to modify an existing
            Money object (by increasing or decreasing its value). Methods are also provided
            that allow you to compare two existing Money objects.
            <br /></remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_Addition(Scoreloop.CoreSocial.API.Model.Money,System.Int32)">
      <summary>
            Creates a new Money object by adding an integer
            value to an existing Money object.
            </summary>
      <param name="money">An existing Money object.</param>
      <param name="value">The int value to be added to the Money object.</param>
      <returns>A new Money object.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_Addition(Scoreloop.CoreSocial.API.Model.Money,System.Double)">
      <summary>
            Creates a new Money object by adding a double value 
            to an existing Money object.
            </summary>
      <param name="money">An existing Money object.</param>
      <param name="value">The double value to be added to the Money object.</param>
      <returns>A new Money object.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_Addition(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.Money)">
      <summary>
            Creates a new Money object by adding a double value 
            to an existing Money object.
            </summary>
      <param name="money">An existing Money object.</param>
      <param name="value">The value to be added to the Money object.</param>
      <returns>A new Money object.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_Subtraction(Scoreloop.CoreSocial.API.Model.Money,System.Int32)">
      <summary>
            Creates a new Money object by subtracting an integer value 
            from an existing Money object.
            </summary>
      <param name="money">An existing Money object.</param>
      <param name="value">The int value to be subtracted from the Money object.</param>
      <returns>A new Money object.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_Subtraction(Scoreloop.CoreSocial.API.Model.Money,System.Double)">
      <summary>
            Creates a new Money object by subtracting a double value 
            from an existing Money object.
            </summary>
      <param name="money">An existing Money object.</param>
      <param name="value">The double value to be subtracted from the Money object.</param>
      <returns>A new Money object.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_Subtraction(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.Money)">
      <summary>
            Creates a new Money object by subtracting a double value 
            from an existing Money object.
            </summary>
      <param name="money">An existing Money object.</param>
      <param name="value">The value to be subtracted from the Money object.</param>
      <returns>A new Money object.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.Equals(System.Object)">
      <summary>
            Convenience API for checking if a Money
            object is equal to a given object.
            </summary>
      <param name="obj">
            The <see cref="T:System.Object" /> that will be tested for equality.
            </param>
      <returns>
        <c>true</c> if the object argument is equal to the Money object, otherwise <c>false.</c></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.Equals(Scoreloop.CoreSocial.API.Model.Money)">
      <summary>
            This method checks if a Money object
            is equal to another Money object, passed as an argument.
            </summary>
      <param name="other">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object that will be tested for equality.
            </param>
      <returns>
        <c>true</c> if the object argument is equal to the Money object, otherwise <c>false.</c></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.CompareTo(Scoreloop.CoreSocial.API.Model.Money)">
      <summary>
            This method compares the amount of currency Money object with a second one.
            </summary>
      <param name="other">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be compared.
            </param>
      <returns>
            1 if the amount of the first Money object is greater than the amount of the second.
            0 if both Money objects are equal.
            -1 if the amount of the first Money object is less than the amount of the second.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.Equals(System.Double)">
      <summary>
            Convenience API that checks the value 
            of a Money object with a value passed
            as an argument.
            </summary>
      <param name="other">
            The value to be checked for equality.
            </param>
      <returns>
        <c>true</c> if the value of the Money object is equal to the value passed as an argument, otherwise <c>false.</c></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.CompareTo(System.Double)">
      <summary>
            Convenience API that compares the value of a
            Money object with a value passed as an argument.
            </summary>
      <param name="other">
            The value to be compared.
            </param>
      <returns>
            1 if the value of the Money object is greater than the value passed as an argument. 0 if they are equal. 
            -1 if the value of the Money object is less than the value passed as an argument.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_Equality(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.Money)">
      <summary>
            This method  checks two Money objects for equality. 
            </summary>
      <param name="a">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <param name="b">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <returns>
        <c>true</c> if both object arguments are equal, otherwise <c>false.</c></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_Equality(Scoreloop.CoreSocial.API.Model.Money,System.Double)">
      <summary>
            Convenience API that checks a Money object and 
            a value for equality.
            </summary>
      <param name="a">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <param name="b">
            A <see cref="T:System.Double" /> value to be checked.
            </param>
      <returns>
        <c>true</c> if the arguments are equal, otherwise <c>false.</c></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_Inequality(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.Money)">
      <summary>
            This method checks two Money objects for inequality. 
            </summary>
      <param name="a">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <param name="b">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <returns>
        <c>true</c> if the object arguments are NOT equal to each other, otherwise <c>false.</c></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_Inequality(Scoreloop.CoreSocial.API.Model.Money,System.Double)">
      <summary>
            Convenience API that checks a Money object and 
            a value for inequality.
            </summary>
      <param name="a">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <param name="b">
            A <see cref="T:System.Double" /> value to be checked.
            </param>
      <returns>
        <c>true</c> if the arguments are NOT equal, otherwise <c>false.</c></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_GreaterThan(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.Money)">
      <summary>
            This method checks if one Money object is 
            greater than a second one.
            </summary>
      <param name="a">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <param name="b">
            A <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <returns>
        <c>true</c> if the amount of the first argument is greater than the amount of the second argument, otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_GreaterThan(Scoreloop.CoreSocial.API.Model.Money,System.Double)">
      <summary>
            Convenience API that checks if the value of a Money
            argument is greater than a value passed as an argument.
            </summary>
      <param name="a">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <param name="b">
            The <see cref="T:System.Double" /> value to be checked.
            </param>
      <returns>
        <c>true</c> if the value of the first argument is greater than the value of the second argument, otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_LessThan(Scoreloop.CoreSocial.API.Model.Money,Scoreloop.CoreSocial.API.Model.Money)">
      <summary>
            This method checks if the value of one Money argument is less than the value of a second.
            </summary>
      <param name="a">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <param name="b">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> value to be checked.
            </param>
      <returns>
        <c>true</c> if the value of the first argument is less than the value of the second argument, otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.op_LessThan(Scoreloop.CoreSocial.API.Model.Money,System.Double)">
      <summary>
            Convenience API that checks if the value of a Money argument is less than a value passed as an argument.
            </summary>
      <param name="a">
            The <see cref="T:Scoreloop.CoreSocial.API.Model.Money" /> object to be checked.
            </param>
      <param name="b">
            The <seealso cref="T:System.Double" /> value to be checked.
            </param>
      <returns>
        <c>true</c> if the value of the first argument is less than the value of the second argument, otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Money.ToString">
      <summary>
            This method returns a string representation of the Money object of the form:
            Currency Code + Value, (e.g. SLD100 representing 100 Scoreloop dollars). 
            The currency code is the one unique to your game that was generated and assigned
            by Scoreloop when the game was registered.
            </summary>
      <returns>
            A <see cref="T:System.String" /> representation of the Money object.
            </returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Money.Value">
      <summary>
            Gets the current amount of currency 
            modelled by the Money object.
            </summary>
      <returns>double The amount of in-game currency represented by the Money object.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Money.Currency">
      <summary>
            Gets the 3-character currency code associated with the
            Money obect. This code is unique to your game and 
            will be the same for all Money objects used in your game.
            It is generated and assigned by Scoreloop when you
            registered it on https://developer.scoreloop.com.
            </summary>
      <returns>string A string representation of the currency code.</returns>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.NetworkStatusEventArgs">
      <summary>
            Arguments passed with network status events.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.NetworkStatusEventArgs.IsAvailable">
      <summary>
            Gets an indication if network connection is available and running.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.NewsFeedItem">
      <summary>
            Class descriging single news item downloaded from Scoreloop. 
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.NewsFeedItem.CompareTo(Scoreloop.CoreSocial.API.Model.NewsFeedItem)">
      <summary>
            Compares two NewsFeedItems to order them by date.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.NewsFeedItem.ToString">
      <summary>
            Gets the string representation of this object.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.NewsFeedItem.Title">
      <summary>
            Gets the news title. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.NewsFeedItem.Description">
      <summary>
            Gets the news detailed description. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.NewsFeedItem.ImageURL">
      <summary>
            Gets the image URL associated with this news. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.NewsFeedItem.ImageMimeType">
      <summary>
            Gets the image type. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.NewsFeedItem.LinkURL">
      <summary>
            Gets the link associated with this news. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.NewsFeedItem.Date">
      <summary>
            Gets the creation date for this news item. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.NewsFeedItem.IsSticky">
      <summary>
            Gets an indication if this news item was marked as sticky. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.NewsFeedItem.IsRead">
      <summary>
            Gets an indication if this news item was already read. 
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.SearchList">
      <summary>
            Class encapsulating generic search and sort criteria.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.SearchList.#ctor(System.String,System.String)">
      <summary>
            Init constructor.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.SearchList.#ctor(System.String)">
      <summary>
            Init constructor without checks on ID.
            Usable only for custom search-list builders.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.SearchList.ToString">
      <summary>
            Gets the text representation of this object.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SearchList.Name">
      <summary>
            Gets the name of the search list.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SearchList.HasValidName">
      <summary>
            Gets the indication if the name field is valid.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.PaymentBrowserEventArgs">
      <summary>
            Arguments passed with payment requests defining expected browser state.
            Some PaymentControllers might need browser to redirect user to complete payment (e.g.: enter credit card details, or to login to external portal).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PaymentBrowserEventArgs.Controller">
      <summary>
            Gets the controller associated with the request.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PaymentBrowserEventArgs.Status">
      <summary>
            Gets the expected browser status.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.PaymentList">
      <summary>
            Class that wraps saving and loading info about payments, that have not yet been fully completed.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PaymentList.HasPendingPayments">
      <summary>
            Gets an indication, if there are any payments, that are currently processing.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PaymentList.HasFailedPayments">
      <summary>
            Gets an indication, if there are any payments, that failed.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.PaymentMethod">
      <summary>
            This class is a container describing available payments.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PaymentMethod.PaymentProvider">
      <summary>
            Gets the payment provider associated with this method.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PaymentMethod.Prices">
      <summary>
            Gets available prices.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.PaymentProvider">
      <summary>
            Class describing payment kind.
            Having payment provider, it's possible to list available methods to pay and associated prices.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PaymentProvider.Kind">
      <summary>
            Gets the kind of this payment provider. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PaymentProvider.Name">
      <summary>
            Gets the name of this payment provider.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PaymentProvider.ImageURL">
      <summary>
            Gets the image associated with this payment provider. 
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PaymentProvider.AttachedData">
      <summary>
            Gets the associated data. 
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.PriceTier">
      <summary>
            The PriceTier models a price definition for all purchasable items in Scoreloop.
            However currently only the free items are available now.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PriceTier.IsFree">
      <summary>
            Gets an indication if item described with this price tier is freely available.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PriceTier.Name">
      <summary>
            Gets the name of the tier.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PriceTier.Description">
      <summary>
            Gets the description of this price tier.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.PriceTier.MinimumPrices">
      <summary>
            Gets the collection of minimum prices if available.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Score">
      <summary>
            The Score class models the score achieved by a particular user in a particular game session.
            </summary>
      <remarks>
            Score objects must minimally contain a result, which is typically the main numerical outcome achieved by users of the game.
            
            Score objects may optionally include:
             - a minor or secondary result,
             - a level (indicating the game stage at which the Score was achieved),
             - a mode (indicating the gameplay setting at which the Score was achieved).
            
            The result, minor result, and level are used for score comparison purposes. The comparison schema can be configured by the
            developer at <a href="https://developer.scoreloop.com">https://developer.scoreloop.com</a>.
            
            Modes are important as Scoreloop generates separate leaderboards for each mode defined for a game.
            Score objects also have a unique identifier generated and assigned by Scoreloop. This is assigned to the object when the
            Score is submitted to the Scoreloop servers.
            
            Scores are managed by two data controllers: IScoreController, which manages single instances of Score; and the IScoresController,
            which manages lists of Score objects.
            
            Score objects may also contain information about score rank, which is the position of the score on a Scoreloop leaderboard.
            However, the rank of a score will generally only have a meaningful value when it is retrieved from the server using
            a IScoresController
            </remarks>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Score.Result">
      <summary>
            Gets the result of the score.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Score.ResultAsTimeSpan">
      <summary>
            Gets the result of the score as TimeSpan.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Score.MinorResult">
      <summary>
            Gets the minor result of the score.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Score.MinorResultAsTimeSpan">
      <summary>
            Gets the minor result of the score as TimeSpan.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Score.Mode">
      <summary>
            Gets the mode of the score.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Score.Level">
      <summary>
            Gets the level associated with the score.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Score.User">
      <summary>
            Gets the user, who achieved this score.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Score.Rank">
      <summary>
            Gets the ranking value of the score.
            </summary>
      <remarks>
            The Constants.InvalidRank defines the invalid value of rank. All scores received from Scoreloop servers
            should have a valid rank set. Only locally created scores won't have this value set.
            </remarks>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ScoreFormat">
      <summary>
            Enumeration describing available score formats.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreFormat.Default">
      <summary>
            Default score formatting string.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreFormat.ScoreOnly">
      <summary>
            Score-only formatting string.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreFormat.LevelAndMode">
      <summary>
            Level and mode formatting string.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreFormat.LevelOnly">
      <summary>
            Level-only formatting string.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreFormat.ModeOnly">
      <summary>
            Mode-only formatting string.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreFormat.ScoreAndLevel">
      <summary>
            Score and level formatting string.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ScoreFormatter">
      <summary>
            Helper class for formatting scores as strings.
            </summary>
      <remarks>
        <p>Utility class for formatting game's score.</p>
        <p>
            Following elements of a score can be displayed:
            <ul><li> mode</li><li> level</li><li> result</li><li> minor result</li></ul></p>
        <p>
            Each of these elements may have a "Symbol" associated, i.e. a human readable description of the unit.
            (like collected "Gems", destroyed "Enemies" etc., "Difficulty" for the level).
            </p>
        <p>Results may either use the numeric value or be converted as time using with ResultTimeConversion</p>
        <p>
            Format string elements:
            <ul><li>%r : result</li><li>%T : result as time with "ResultTimeConversion"</li><li>%R : result symbol string ("ResultSymbol")</li><li>%q : minor result</li><li>%t : minor result as time with "ResultTimeConversion"</li><li>%Q : minor result symbol string ("MinorResultSymbol")</li><li>%l : level</li><li>%L : level symbol string ("LevelSymbol")</li><li>%m : mode</li><li>%M : mode symbol string ("ModeSymbol")</li><li>%S : separator string between level, mode and result parts</li></ul></p>
        <p>
            ResultTimeConversion only format:
            <ul><li>%h : hours</li><li>%m : minutes</li><li>%0m : minutes, zero-padded to two digits</li><li>%s : seconds</li><li>%0s : seconds, zero-padded to two digits</li><li>%q : 1/100 seconds</li><li>%0q : 1/100 seconds, zero-padded to two digits</li></ul></p>
        <p>
          <b>Keys:</b>
        </p>
        <p>
            "DefaultFormat" = ;<br />
            "NoLevelFormat" = ;<br />
            "LevelOnlyFormat" = ;<br />
            "ModeOnlyFormat" = ;<br />
            "LevelAndModeFormat" = ;<br />
            "ScoresAndLevelFormat" = ;<br />
            "ResultTimeConversion" = ;<br /><br />
            "LevelSymbol" = ;<br />
            "ModeSymbol" = ;<br />
            "ResultSymbol" = ;<br />
            "MinorResultSymbol" = ;<br /><br />
            "Separator" = ;<br /><br />
            "1" = ;<br />
            "2" = ;<br />
            ...<br />
            "mode:0" = ;<br />
            "mode:1" = ;<br />
            ...<br /></p>
      </remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.ScoreFormatter.GetLevel(System.UInt32,System.String)">
      <summary>
            Gets the level description.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.ScoreFormatter.GetLevel(System.UInt32)">
      <summary>
            Gets the level description.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.ScoreFormatter.GetMode(System.UInt32,System.String)">
      <summary>
            Gets the mode description.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.ScoreFormatter.GetMode(System.UInt32)">
      <summary>
            Gets the mode description.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.ScoreFormatter.Format(Scoreloop.CoreSocial.API.Model.Score)">
      <summary>
            Formats score using Default format.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.ScoreFormatter.Format(Scoreloop.CoreSocial.API.Model.Score,Scoreloop.CoreSocial.API.Model.ScoreFormat)">
      <summary>
            Formats score using given format.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ScoreFormatter.Count">
      <summary>
            Gets the number of format definitions.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ScoreFormatter.AvailableModes">
      <summary>
            Gets the names of all available modes, where number of modes is defined as game's ModeCount.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ScoreFormatter.AvailableLevels">
      <summary>
            Gets the names of all available levels. The number of levels is determined dynamically (starting from 0, up to all non-null numeric keys).
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ScoreFormatter.AvailableFormats">
      <summary>
            Gets the names of standard format keys.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ScoreSearchList">
      <summary>
            Class defining score search list criteria.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.ScoreSearchList.Equals(System.Object)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.ScoreSearchList.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.ScoreSearchList.Equals(Scoreloop.CoreSocial.API.Model.ScoreSearchList)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ScoreSearchList.TimeScope">
      <summary>
            Gets the time scope.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ScoreSearchList.SocialScope">
      <summary>
            Gets the social scope.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.ScoreSearchList.CountryScope">
      <summary>
            Gets the country scope.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ScoreSearchListCountryScope">
      <summary>
            Enumeration defining scope for country searches on score lists.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreSearchListCountryScope.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreSearchListCountryScope.Nationality">
      <summary>
            User's nationality.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreSearchListCountryScope.Region">
      <summary>
            Current user's region (location of submitted score).
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ScoreSearchListSocialScope">
      <summary>
            Enumeration defining scope for social searches on score lists.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreSearchListSocialScope.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreSearchListSocialScope.Friends">
      <summary>
            Based on friends list.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.ScoreSearchListTimeScope">
      <summary>
            Enumeration defining scope for time-based searches on score lists.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreSearchListTimeScope.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreSearchListTimeScope.Global">
      <summary>
            All time.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreSearchListTimeScope.Days7">
      <summary>
            Last 7 days.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreSearchListTimeScope.Days30">
      <summary>
            Last 30 days.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.ScoreSearchListTimeScope.Hours24">
      <summary>
            Last 24 hours.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.SearchOperator">
      <summary>
            Enumerates the types of search operation that are available.
            </summary>
      <remarks>
            Can be used with an IUsersController when implementing a user search function.
            </remarks>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.SearchOperator.Prefix">
      <summary>
            Will search the beginning of a string for a positive match.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.SearchOperator.Like">
      <summary>
            Will search for "similar" matches.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.SearchOperator.ExactMatch">
      <summary>
            Will search for exact matches only.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.Session">
      <summary>
            Model class describing current connection with Scoreloop server.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.Session.ClearPersistedState">
      <summary>
            Removes all stored data from persistent storage.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.Model.Session.UserChanged">
      <summary>
            Event fired each time a session user gets updated.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.Model.Session.GameChanged">
      <summary>
            Event fired each time a session game has changed.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.Model.Session.Authenticated">
      <summary>
            Event fired each time session is authenticated at Scoreloop.
            This event might be fired multiple times during one application launch
            as session automatically expires after some inactivity.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.Model.Session.BalanceChanged">
      <summary>
            Event fired each time balance has been changed.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.Model.Session.ChallengeChanged">
      <summary>
            Event fired each time an active user challenge has been updated.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.Model.Session.LicenseAccepted">
      <summary>
            Event fired when user has accepted EULA.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Session.Status">
      <summary>
            Gets the current session status.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Session.IsExpired">
      <summary>
            Gets an indication if current session has just expired.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Session.IsAuthenticated">
      <summary>
            Gets an indication if current session is still authenticated.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Session.IsLicenseAccepted">
      <summary>
            Gets an indication if user accepted EULA.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Session.Currency">
      <summary>
            Gets the currency of the current game.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Session.Tag">
      <summary>
            Gets or sets user defined value associated with session.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Session.User">
      <summary>
            Gets the current user info.
            This value will be updated during the session auth.
            To monitor changes performed listen for UserChanged event,
            as the whole user object is replace with new one.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Session.Device">
      <summary>
            Gets the current device info.
            This value will be updated during the session auth.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Session.Challenge">
      <summary>
            Gets the indication of the status for current user's challenge.
            This value can ge modified via IChallengeController.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.Session.Balance">
      <summary>
            Gets the current user's money balance.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.SessionChallengeChangedEventArgs">
      <summary>
            Arguments passed together with event, that current session user's challenge object has been updated.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.SessionEventArgs">
      <summary>
            Arguments passed together with session events.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SessionEventArgs.Session">
      <summary>
            Gets the session object.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SessionChallengeChangedEventArgs.OldChallenge">
      <summary>
            Gets the previous value of the user's challenge.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SessionChallengeChangedEventArgs.NewChallenge">
      <summary>
            Gets the new value of the user's challenge.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SessionChallengeChangedEventArgs.CurrentChallenge">
      <summary>
            Gets current session user's challenge.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.SessionStatus">
      <summary>
            States of session.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.SessionStatus.Expired">
      <summary>
            Session has been expired.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.SessionStatus.Authenticating">
      <summary>
            Session is being authenticated.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.SessionStatus.Authenticated">
      <summary>
            Session is already authenticated.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.SessionUserChangedEventArgs">
      <summary>
            The SessionUserChangedEventArgs class represents the arguments passed, together with an event, indicating that the current session user object has been updated.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SessionUserChangedEventArgs.OldUser">
      <summary>
            Gets the previous value of the session user.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SessionUserChangedEventArgs.NewUser">
      <summary>
            Gets the new value of the session user.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SessionUserChangedEventArgs.CurrentUser">
      <summary>
            Gets the current session user.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.SocialNetwork">
      <summary>
            Enumeration describing supported social networks.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.SocialNetwork.Twitter">
      <summary>
            Twitter social network.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.SocialNetwork.Facebook">
      <summary>
            Facebook social network.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.SocialNetworkBrowserEventArgs">
      <summary>
            Arguments passed along with browser visibility changes required by social-network authentication process.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SocialNetworkBrowserEventArgs.Status">
      <summary>
            Requested browser status.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.SocialNetworkBrowserEventArgs.WebBrowser">
      <summary>
            Source web-browser object. 
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.TagSearchOperator">
      <summary>
            Enumeration that defines the way tags are used during loading of the items from Scoreloop server.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.TagSearchOperator.RequiresAll">
      <summary>
            Item must be marked with all specified tags.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.TagSearchOperator.RequiresOneOrMore">
      <summary>
            Item must be marked with at least one tag specified.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.UnexpectedExceptionEventArgs">
      <summary>
            Arguments passed by ScoreloopClient describing exception found in any of the callbacks raised by Scoreloop controllers.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UnexpectedExceptionEventArgs.Client">
      <summary>
            Gets the ScoreloopClient instance that spot the exception.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UnexpectedExceptionEventArgs.Controller">
      <summary>
            Gets the controller (if applicable; can be null) in context of which the exception was thrown.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UnexpectedExceptionEventArgs.Exception">
      <summary>
            Gets the captured exception.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.User">
      <summary>
            The <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> class is an Entity class carrying information particular to a Scoreloop user.
            Scoreloop considers users to be unique players tied to unique devices. 
            The <see cref="T:Scoreloop.CoreSocial.API.Model.Session" /> class maintains an instance of the local User (referred to as the session user).
            User objects that are not the session user may not have all properties available.
            However, the user login is always available.
            User objects are returned in the following situations:
            <ul><li>From the Scoreloop <see cref="T:Scoreloop.CoreSocial.API.Model.Session" /> (the session user).</li><li>From other <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> objects (other users' friend lists, for example).</li><li>From a <see cref="T:Scoreloop.CoreSocial.API.Model.Score" /> object, (the user who submitted the score).</li><li>From a <see cref="T:Scoreloop.CoreSocial.API.IUserController" /> (the user set for the controller).</li><li>From a <see cref="T:Scoreloop.CoreSocial.API.IUsersController" /> (the list of users requested from the server).</li><li>From a <see cref="T:Scoreloop.CoreSocial.API.Model.Challenge" /> object (the challenge contender, contestant, winner, and loser).</li></ul><br />
            Basic Usage:
            <br /><see cref="T:Scoreloop.CoreSocial.API.Model.User" /> objects are managed by two controllers:
            <ul><li> The <see cref="T:Scoreloop.CoreSocial.API.IUserController" /> which is used to retrieve user information from the server. It is also used to update
            user information on the server.</li><li> The <see cref="T:Scoreloop.CoreSocial.API.IUsersController" /> which retrieves lists of users from the server.</li></ul><br />
            Instances of the IUserController and IUsersController can be created using the <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" />.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.User.ToString">
      <summary>
            Returns the System.String representation of this object.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.Login">
      <summary>
            Gets the login for the user.
            The login must be greater than 3 characters long.
            </summary>
      <returns>A string representation of the user login.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.Email">
      <summary>
            Gets the user's email. 
            </summary>
      <returns>A string representation of the user's email address.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.Nationality">
      <summary>
            Gets the user's nationality.
            The nationality should be represented using
            the country codes of the <a href="http://www.iso.org/iso/english_country_names_and_code_elements">ISO-3166</a>
            standard.
            </summary>
      <returns>A string representation of the user's national country code.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.LocationCountry">
      <summary>
            Gets the geographical location of the user.
            </summary>
      <returns>A string representation of the country code where the user is located.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.ImageURL">
      <summary>
            Gets the URL for the user's profile image.
            </summary>
      <returns>The image URL</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.ImageSource">
      <summary>
            Gets the source of the user's profile image. 
            </summary>
      <returns>The image source.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.OwnsCurrentSession">
      <summary>
            Predicate used to check if the user
            is the session user.
            </summary>
      <returns>
        <c>true</c> if the user is the session user, otherwise <c>false</c></returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.State">
      <summary>
            Gets the current state of the user, (e.g. "active", "pending", "anonymous", etc). 
            </summary>
      <returns>The current <see cref="T:Scoreloop.CoreSocial.API.Model.UserState" /></returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.Counters">
      <summary>
            Returns info about globally accessible user counter
            (like: number of Scoreloo-enabled games, total number of achievements...).
            This field is filled only when IUserController loads detailed info request.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.ChallengeStatistics">
      <summary>
            Returns info about user challenges
            (like: number of challenges played / won / lost...).
            This field is filled only when IUserController loads detailed info request.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.User.HasValidImage">
      <summary>
            Gets the indication if user has a valid image set.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.UserCounters">
      <summary>
            Class storing statistics for user profile.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UserCounters.HasValues">
      <summary>
            Gets the indication if given object has data loaded from server or is just a placeholder filled with zeros.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UserCounters.TotalAchievements">
      <summary>
            Provides access to the number of global achievements the user has.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UserCounters.Games">
      <summary>
            Provides access to the number of Scoreloop-enabled games the user is (or has been) active in.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UserCounters.Friends">
      <summary>
            Gets the number of friends currently on the user's friend list.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.UserImageSource">
      <summary>
            Enumeration defining source location of user image.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserImageSource.None">
      <summary>
            User has no image.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserImageSource.Scoreloop">
      <summary>
            User image is local to Scoreloop.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserImageSource.Twitter">
      <summary>
            User image is a copy of user's profile image from Twitter.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserImageSource.Facebook">
      <summary>
            User image is a copy of user's profile image from Twitter.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.UserLoadScope">
      <summary>
            Enumerates the types of detail levels for loaded user info.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserLoadScope.Minimal">
      <summary>
            Requests basic info about the user (login, image, email - if allowed, counters, social-network info.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserLoadScope.Detailed">
      <summary>
            Requests basic info about the user plus statistics.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserLoadScope.ContextOnly">
      <summary>
            Requests user context.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.UsersControllerSearchOptions">
      <summary>
            The UsersControllerSearchOptions class lets you define exactly how you would like to search for Scoreloop users on the server.
            </summary>
      <remarks>
        <br />
            Basic Usage:
            <ol><li>Use the <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" /> to get an instance of IUsersController by calling CreateUsersController.</li><li>Create an instance by calling the UsersControllerSearchOptions(UserSearchType, SearchOperator) constructor method.</li><li>Pass the UsersControllerSearchOptions object to the IUsersController's LoadUsers(string, UsersControllerSearchOptions) method.</li></ol></remarks>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.UsersControllerSearchOptions.#ctor(Scoreloop.CoreSocial.API.Model.UserSearchType,Scoreloop.CoreSocial.API.Model.SearchOperator)">
      <summary>
            Constructor. Use this to create an instance of UsersControllerSearchOptions.
            </summary>
      <param name="searchType">Defines the <see cref="T:Scoreloop.CoreSocial.API.Model.UserSearchType" /> either by login or email.</param>
      <param name="oper">The <see cref="T:Scoreloop.CoreSocial.API.Model.SearchOperator" /> specifies an "exact" match, or match by "prefix".</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.UsersControllerSearchOptions.#ctor(Scoreloop.CoreSocial.API.Model.UserSearchType,Scoreloop.CoreSocial.API.Model.SearchOperator,System.Boolean,System.UInt32)">
      <summary>
            Constructor. Use this to create an instance of UsersControllerSearchOptions.
            </summary>
      <param name="searchType">Defines the <see cref="T:Scoreloop.CoreSocial.API.Model.UserSearchType" /> either by login or email.</param>
      <param name="oper">The <see cref="T:Scoreloop.CoreSocial.API.Model.SearchOperator" /> specifies an "exact" match, or match by "prefix".</param>
      <param name="searchGlobal">Defines either to search all database of users or only the ones playing current game.</param>
      <param name="limit">Maximum number of results to receive.</param>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UsersControllerSearchOptions.Operator">
      <summary>
            Gets and sets the <see cref="T:Scoreloop.CoreSocial.API.Model.SearchOperator" />. You can
            define the search so that it only returns "exact" matches,
            matches that are "like" each other, or else match by "prefix".
            </summary>
      <returns>
        <see cref="T:Scoreloop.CoreSocial.API.Model.SearchOperator" />
      </returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UsersControllerSearchOptions.SearchType">
      <summary>
            Gets and sets the <see cref="T:Scoreloop.CoreSocial.API.Model.UserSearchType" />.
            You can define the search so that is will match by user login or
            by email.
            </summary>
      <returns>
        <see cref="T:Scoreloop.CoreSocial.API.Model.UserSearchType" />
      </returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UsersControllerSearchOptions.SearchGlobal">
      <summary>
            Gets and sets a flag indicating whether the
            search should be carried out globally or not.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.UsersControllerSearchOptions.Limit">
      <summary>
            Gets and sets a limit for the search. 
            The search request will stop if this limit is reached.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.UserSearchType">
      <summary>
            Enumerates the types of user searches you may define: by login, or by email.
            <seealso cref="T:Scoreloop.CoreSocial.API.Model.UsersControllerSearchOptions" /></summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserSearchType.ByLogin">
      <summary>
            Matches against the user login. 
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserSearchType.ByEmail">
      <summary>
            Matches against the user email. 
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.UserState">
      <summary>
            Enumerates the different states a Scoreloop <see cref="T:Scoreloop.CoreSocial.API.Model.User" /> may have.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserState.Unknown">
      <summary>
            Unknown. The state of the user has not been determined yet.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserState.Active">
      <summary>
            Active. The user is in an active state when the account validation process has been completed.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserState.Passive">
      <summary>
            Passive. A passive state describes an anonymous user who has chosen a user name and who is identified by their device.
            Passive users can upload high-scores and participate in challenges.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserState.Anonymous">
      <summary>
            Anonymous. When a device connects to Scoreloop, if no user information can be found for it, a username is automatically generated
            for the device and the state of the user set to "anonymous". Anonymous users can upload high-scores, but not challenges.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserState.Pending">
      <summary>
            Pending. A user is pending when the confirmation email has been sent out but not responded to.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.Model.UserState.Suspended">
      <summary>
            Suspended.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.Model.WebBrowserEventArgs">
      <summary>
            Arguments passed together with abstract browser events.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.Model.WebBrowserEventArgs.#ctor(Scoreloop.CoreSocial.API.Model.IWebBrowser,System.Uri,System.String)">
      <summary>
            Init constructor.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.WebBrowserEventArgs.Browser">
      <summary>
            Gets the reference to web browser wrapper object.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.WebBrowserEventArgs.Url">
      <summary>
            Gets the reference this arguments are passed along.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.Model.WebBrowserEventArgs.SourceUrl">
      <summary>
            Gets the absolute URL argument passed along.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ScoreloopClient">
      <summary>
             The ScoreloopClient sets up the underlying infrastructure necessary for using Scoreloop in a game. 
             The client establishes the initial handshake between the Scoreloop servers and your game and 
             creates the Scoreloop <see cref="P:Scoreloop.CoreSocial.API.ScoreloopClient.Session" />. Initialization of the client should happen as early as possible.
             Typically only a single instance of the ScoreloopClient will be created, which should persist for the entire lifetime of your game.
            
             Your must register your game at https://developer.scoreloop.com in order to obtain an identifier and secret 
             for your game application. Both the game-id and game secret are required when initializing the  ScoreloopClient. 
             
             The ScoreloopClient is also used to create instances of a number of data controllers that manage the transfer of
             data between your game and the Scoreloop servers. 
             </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.#ctor(System.Version,System.String,System.String,System.String)">
      <summary>
            Constructor. Creates an instance of the ScoreloopClient using the given
            parameters. You must have registered your game on https://developer.scoreloop.com in order
            to get a game identifier, game secret, and currency code.
            </summary>
      <param name="version">The current version of the running game.</param>
      <param name="gameID">The identifier generated by Scoreloop and assigned to your game 
            when you registered it on https://developer.scoreloop.com</param>
      <param name="secret">The game secret generated by Scoreloop and assigned to your game
            when you registered it on https://developer.scoreloop.com</param>
      <param name="currency">The 3-character currency code generated by Scoreloop and assigned to your
            game when you registered it on https://developer.scoreloop.com</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.#ctor(Scoreloop.CoreSocial.API.ConfigurationBuilder)">
      <summary>
            Constructor. Creates an instance of the ScoreloopClient using
            the given <see cref="T:Scoreloop.CoreSocial.API.ConfigurationBuilder" /> configuration settings. The configuration object should 
            model your game and provides implicit access to the game id, secret and currency code. Optionally it might define
            access to achievements definitions
            </summary>
      <param name="configuration">A <see cref="T:Scoreloop.CoreSocial.API.ConfigurationBuilder" /> object modelling your game's configuration.</param>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.#ctor(System.String)">
      <summary>
            Constructor. Creates an instance of ScoreloopClient using the given content as a definition of <see cref="T:Scoreloop.CoreSocial.API.ConfigurationBuilder" /> settings.
            Expected input is in *.string -like file format with at least game definition section.
            
            Example:
            "game.name"="My Game";
            "game.id"="xxx";
            "game.secret"="xxx";
            "game.version"="1.0";
            "game.currency"="SLD";
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateSessionController">
      <summary>
            This method is used to create an instance of the <see cref="T:Scoreloop.CoreSocial.API.ISessionController" />.
            The ISessionController can be used to manually authenticate the Scoreloop <see cref="P:Scoreloop.CoreSocial.API.ScoreloopClient.Session" />
            if required. You should note however that the session will be authenticated automatically
            after the first communication with the server.
            </summary>
      <returns>An instance of <see cref="T:Scoreloop.CoreSocial.API.ISessionController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateGameController">
      <summary>
            This method is used to create an instance of the <see cref="T:Scoreloop.CoreSocial.API.IGameController" />.
            The IGameController is used to request a detailed info of Scoreloop-enabled game from the server, while knowing only its identifier.
            </summary>
      <returns>An instance of <see cref="T:Scoreloop.CoreSocial.API.IGameController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateGamesController">
      <summary>
            This method is used to create an instance of the <see cref="T:Scoreloop.CoreSocial.API.IGamesController" />.
            The IGamesController is used to request a list of Scoreloop-enabled games
            from the server. 
            </summary>
      <returns>An instance of <see cref="T:Scoreloop.CoreSocial.API.IGamesController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateGameItemsController">
      <summary>
            This method is used to create an instance of the <see cref="T:Scoreloop.CoreSocial.API.IGameItemsController" />.
            The IGameItemsController is used to request a list of game's downloadable content
            from the Scoreloop server.
            </summary>
      <returns>An instance of <see cref="T:Scoreloop.CoreSocial.API.IGameItemsController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateGameItemController">
      <summary>
            This method is used to create an instance of the <see cref="T:Scoreloop.CoreSocial.API.IGameItemController" />.
            The IGameItemController is used to request a content of single game's downloadable content
            from the Scoreloop server and claim it's ownership.
            </summary>
      <returns>An instance of <see cref="T:Scoreloop.CoreSocial.API.IGameItemController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateScoresController">
      <summary>
            This method is used to create an instance of the <see cref="T:Scoreloop.CoreSocial.API.IScoresController" />.
            The IScoresController is used to request lists of filtered scores (aka leaderboards)
            from the server.
            </summary>
      <returns>An instance of <see cref="T:Scoreloop.CoreSocial.API.IScoresController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateScoreSearchListProvider">
      <summary>
            This method returns score-related search lists.
            </summary>
      <returns>An instance of <see cref="T:Scoreloop.CoreSocial.API.IScoreSearchListProvider" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateActivitiesController">
      <summary>
            This method is used to create an instance of the <see cref="T:Scoreloop.CoreSocial.API.IActivitiesController" />.
            The IActivitiesController requests lists of Gets the instance of IActivitiesController.
            </summary>
      <returns>An instance of the <see cref="T:Scoreloop.CoreSocial.API.IActivitiesController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateRankingController">
      <summary>
            This method is used to create an instance of the <see cref="T:Scoreloop.CoreSocial.API.IRankingController" />.
            The IRankingController requests "ranked" lists of either scores or users from the server.
            A "ranked" list contains entities ranked according to their absolute positions on a leaderboard,
            e.g. "first", "second", "third" etc.
            </summary>
      <returns>An instance of the <see cref="T:Scoreloop.CoreSocial.API.IRankingController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateScoreController">
      <summary>
            This method is used to create an instance of the <see cref="T:Scoreloop.CoreSocial.API.IScoreController" />.
            The IScoreController is used to create new <see cref="T:Scoreloop.CoreSocial.API.Model.Score" /> objects.
            The IScoreController is also used to submit Score objects
            to Scoreloop at the end of gameplay.
            </summary>
      <returns>An instance of <see cref="T:Scoreloop.CoreSocial.API.IScoreController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateUsersController">
      <summary>
            This method is used to create an instance of the <see cref="T:Scoreloop.CoreSocial.API.IUsersController" />.
            The IUsersController is used to request lists of Scoreloop users from
            the server. A common use of the controller is to request the "buddy-list" 
            for the current session user from the server. 
            </summary>
      <returns>An instance of <see cref="T:Scoreloop.CoreSocial.API.IUsersController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateUserController">
      <summary>
            This method is used to create an instance of <see cref="T:Scoreloop.CoreSocial.API.IUserController" />.
            The IUserController is used to load, update, or modify information in the
            session user's Scoreloop profile. The controller is also used to add or 
            remove people to/from the session user's buddy-list.
            </summary>
      <returns>An instance of the <see cref="T:Scoreloop.CoreSocial.API.IUserController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateChallengeController">
      <summary>
            This method is used to create an instance of <see cref="T:Scoreloop.CoreSocial.API.IChallengeController" />.
            The IChallengeController is used to create, accept, reject, or submit a 
            <see cref="T:Scoreloop.CoreSocial.API.Model.Challenge" /> on behalf of the session user.
            </summary>
      <returns>An instance of <see cref="T:Scoreloop.CoreSocial.API.IChallengeController" /></returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateChallengesController">
      <summary>
            This method is used to create an instance of <see cref="T:Scoreloop.CoreSocial.API.IChallengesController" />.
            The IChallengesController can request two different lists of challenges from the server:
            <ol><li>The list of all challenges that are available for the session user to play.</li><li>The challenge history of the session user, (e.g. challenges played, rejected, currently underway).</li></ol></summary>
      <returns>IChallengesController A challenges controller.</returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateAchievementController">
      <summary>
            This method is used to create an instance of <see cref="T:Scoreloop.CoreSocial.API.IAchievementController" />.
            The IAchievementController can update progress of given achievement and upload achieved ones on Scoreloop server.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateAchievementsController">
      <summary>
            This method is used to create an instance of <see cref="T:Scoreloop.CoreSocial.API.IAchievementsController" />.
            The IAchievementsController can sychronize local and remote progress of users achievements.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateMessageController">
      <summary>
            This method is used to create an instance of <see cref="T:Scoreloop.CoreSocial.API.IMessageController" />.
            The IMessageController can send messages between users about some scores, challenges and games through emails or social networks.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateSocialNetworkController">
      <summary>
            This method is used to obtain the instance of <see cref="T:Scoreloop.CoreSocial.API.ISocialNetworkController" />.
            ISocialNetworkController can login into an external social network (i.e.: Facebook, Twitter), allowing further publishing messages about Scoreloop scores, achievements to friends.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateSocialNetworkProvider">
      <summary>
            This method is used to obtain the instance of <see cref="T:Scoreloop.CoreSocial.API.ISocialNetworkProvider" />.
            It might be further used to enumerate all supported social networks (i.e.: Facebook, Twitter).
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateNewsFeedController">
      <summary>
            This method is used to obtain the instance of <see cref="T:Scoreloop.CoreSocial.API.INewsFeedController" />.
            INewsFeedController can load syndication news created on admin panel.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreatePaymentMethodsController">
      <summary>
            This method is used to obtain the instance of <see cref="T:Scoreloop.CoreSocial.API.IPaymentMethodsController" />.
            IPaymentMethodsController can list available payment methods for purchases of given game item.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreatePaymentProviderController(Scoreloop.CoreSocial.API.Model.PaymentMethod)">
      <summary>
            This method is used to obtain the instance of <see cref="T:Scoreloop.CoreSocial.API.IPaymentProviderController" />.
            IPaymentProviderController can perform a checkout of given game item using specified payment method.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.CreateHttpProvider">
      <summary>
            Creates an instance of the HTTP request provider.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.UpdateDispatcher(Scoreloop.CoreSocial.API.IEventDispatcher)">
      <summary>
            Updates the thread-synchronization dispatcher for event callback calls on this ScoreloopClient and all its controllers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.UpdateDispatcher(System.Windows.DependencyObject)">
      <summary>
            Updates the thread-synchronization dispatcher for event callback calls on this ScoreloopClient and all its controllers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.UpdateDispatcher(System.Windows.Threading.Dispatcher)">
      <summary>
            Updates the thread-synchronization dispatcher for event callback calls on this ScoreloopClient and all its controllers.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.Finalize">
      <summary>
            Designated destructor.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.Dispose">
      <summary>
            Releases all related native resources used by Scoreloop client.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.Close">
      <summary>
            Identical to Dispose().
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.ClearFailedScores">
      <summary>
            Removes info about failed scores that is assigned to this instance of ScoreloopClient and stored locally.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClient" />.
            </returns>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.GetService(System.Type)">
      <summary>
            Gets given service out of the Scoreloop client object.
            As for now, only the controllers are supported.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.GetService(System.Type,System.Object)">
      <summary>
            Gets given service out of the Scoreloop client object.
            As for now, only the controllers are supported.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.GetService``1">
      <summary>
            Gets the instance of requested controller.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClient.GetService``1(System.Object)">
      <summary>
            Gets the instance of requested controller.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.ScoreloopClient.ControllerCreated">
      <summary>
            Event fired each time a new controller is created.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.ScoreloopClient.DeviceCreated">
      <summary>
            Event fired when user logs in for the first time on Scoreloop servers and the device is registered and associated with user account.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.ScoreloopClient.UnexpectedExceptionUnhandled">
      <summary>
            Event fired each time an unhandled exception is caught inside the callbacks of any controllers.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.ScoreloopClient.ProcessingChanged">
      <summary>
            Event fired each time, this instance of ScoreloopClient started or stopped processing of requests.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.ScoreloopClient.LicenseRequiresAcceptance">
      <summary>
            Event fired each time connection to Scoreloop is about to established and user didn't accept yet EULA.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.Version">
      <summary>
            Provides access to the ScoreloopClient API version.
            </summary>
      <returns>The current ScoreloopClient API version.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.Platform">
      <summary>
            Provides access to the platform the ScoreloopClient was compiled against.
            </summary>
      <returns>A string representation of the platform name.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.BuildTag">
      <summary>
            Gets the build tag for this ScoreloopClient.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.ApiBuildTag">
      <summary>
            Gets the build tag for this ScoreloopClient.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.ApiVersion">
      <summary>
            Gets the Scoreloop client API version.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.ApiPlatform">
      <summary>
            Provides access to the platform the ScoreloopClient was compiled against.
            </summary>
      <returns>A string representation of the platform name.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.Timeout">
      <summary>
            This method is used to get or set 
            a request timeout.
            </summary>
      <returns>The request timeout that is currently set.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.Tag">
      <summary>
            Gets or sets any tag value associated with this object.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.Session">
      <summary>
            Convenience API that provides access to the current Scoreloop <see cref="P:Scoreloop.CoreSocial.API.ScoreloopClient.Session" />.
            </summary>
      <returns>
        <see cref="P:Scoreloop.CoreSocial.API.ScoreloopClient.Session" /> The current Scoreloop session.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.AwardList">
      <summary>
            Gets the list of awards defined for current game.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.AchievementList">
      <summary>
            Gets the list of achievements gained by user in current game.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.GameItemList">
      <summary>
            Gets the list of locally stored info about game items.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.PaymentList">
      <summary>
            Gets the list of locally stored, not finished payments.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.Game">
      <summary>
            Provides access to the current game.
            </summary>
      <returns>A <see cref="P:Scoreloop.CoreSocial.API.ScoreloopClient.Game" /> object that models your game application.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.Status">
      <summary>
            Provides access to the current status of the ScoreloopClient, (e.g. IsSessionAuthenticated, IsLicenseAccepted, etc).
            </summary>
      <returns>The current <see cref="T:Scoreloop.CoreSocial.API.ScoreloopClientStatus" /></returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.FailedScores">
      <summary>
            Gets the list of failed scores.
            Each call creates new instance of array, so call it with caution.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.IsDisposed">
      <summary>
            Gets an indication if given object was already disposed.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClient.IsProcessing">
      <summary>
            Gets an indication, if there are any requests being currently processed.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ScoreloopClientStatus">
      <summary>
            Class representing status of ScoreloopClient.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopClientStatus.IsConnected(Scoreloop.CoreSocial.API.Model.SocialNetwork)">
      <summary>
            Gets and indication, if client is connected to specified social network.
            </summary>
    </member>
    <member name="E:Scoreloop.CoreSocial.API.ScoreloopClientStatus.NetworkStatusChanged">
      <summary>
            Event fired each time a network connection status changes.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.Status">
      <summary>
            Gets the current session status.
            </summary>
      <remarks>
            The value of this property is essential, when the application is started and state is restored (tombstoning).
            If it has still the Authenticated value, then no authentication is required (also it won't be authenticated automatically,
            what will save time on first request).
            </remarks>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.IsSessionExpired">
      <summary>
            Gets an indication, if session already expired.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.IsSessionAuthenticated">
      <summary>
            Gets an indication, if session is authenticated.
            </summary>
      <remarks>
            See also <seealso cref="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.Status" /> for more info.
            </remarks>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.IsAchievementsSyncRequired">
      <summary>
            Gets an indication, if local achievements should be synchronized with server.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.IsLicenseAccepted">
      <summary>
            Gets an indication, if user already accepted the Scoreloop EULA.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.IsNetworkAvailable">
      <summary>
            Gets an indication, if network connection is available.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.IsConnectedToFacebook">
      <summary>
            Gets an indication, if client is connected to Facebook account.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.IsConnectedToTwitter">
      <summary>
            Gets an indication, if client is connected to Twitter account.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.IsProcessing">
      <summary>
            Gets an indication, if there are any requests being currently processed.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.Platform">
      <summary>
            Gets the name of the platform this ScoreloopClient was compiled against.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.Version">
      <summary>
            Gets the ScoreloopClient API version.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.ExpectedProfileImageWidth">
      <summary>
            Gets the expected width of the user's profile image.
            </summary>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopClientStatus.ExpectedProfileImageHeight">
      <summary>
            Gets the expected height of the user's profile image.
            </summary>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.ScoreloopError">
      <summary>
            The ScoreloopError class provides access to any error that 
            may have been triggered during the most recent Scoreloop request.
            </summary>
    </member>
    <member name="M:Scoreloop.CoreSocial.API.ScoreloopError.ToString">
      <summary>
            Gets the string representation of this object by concatenating
            the error message, status, error code, exception, and error and
            returning the string.
            </summary>
      <returns>A string representation of the ScoreloopError object.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopError.Message">
      <summary>
            Gets a message text explaining the problem.
            </summary>
      <returns>A string representation of the error message.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopError.Status">
      <summary>
            Gets the request status code, (e.g. RequestCancelled, RequestAlreadyProcessing).
            </summary>
      <returns>The associated <see cref="T:Scoreloop.CoreSocial.API.StatusCode" />.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopError.ErrorCode">
      <summary>
            Gets the error code, (<seealso cref="P:Scoreloop.CoreSocial.API.ScoreloopError.ErrorCode" />).
            </summary>
      <returns>The associated <see cref="P:Scoreloop.CoreSocial.API.ScoreloopError.ErrorCode" />.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopError.ErrorDetail">
      <summary>
            Gets a detailed description of the error code.
            The value and type depends on what request 
            was carried out. 
            </summary>
      <returns>The associated error detail.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopError.Arguments">
      <summary>
            Gets the collection of additional error 
            arguments with their descriptions.
            </summary>
      <returns>Additional error arguments.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopError.Exception">
      <summary>
            Gets the exception associated with the error object.  
            </summary>
      <returns>The associated exception.</returns>
    </member>
    <member name="P:Scoreloop.CoreSocial.API.ScoreloopError.InnerError">
      <summary>
            This provides access to any other Scoreloop error object 
            that may have caused the current error.
            </summary>
      <returns>The ScoreloopError that caused the current one.</returns>
    </member>
    <member name="T:Scoreloop.CoreSocial.API.StatusCode">
      <summary>
            Enumeration defining the status of any Scoreloop operation or request that may have been called.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.Undefined">
      <summary>
            Request has an undefined result.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.Success">
      <summary>
            Request finished with success (if greater or equal to this value).
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.Created">
      <summary>
            The entity was succesfully created or updated.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.SuccessLast">
      <summary>
            Last value for successful response.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.MultipleChoices">
      <summary>
            Request finished with multiple representations and one should be choosen before progressing.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.AuthenticationError">
      <summary>
            Request rejected because of an authentication error.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.RegistrationError">
      <summary>
            Request was rejected because of registration error.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.NotFound">
      <summary>
            Requested channel was not found.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.Conflict">
      <summary>
            The local state of the entity is in conflict with the entity's server state.
            This error indicates that the client has stale data.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.ParameterAlreadySet">
      <summary>
            The value for parameter has already been set.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.IncompatibleParameters">
      <summary>
            Request misses some parameters or has set non-existing ones.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.InvalidServerConnection">
      <summary>
            Cannot establish connection to the remote Scoreloop server.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.InvalidServerRequest">
      <summary>
            Cannot complete Scoreloop server request.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.InvalidServerOperation">
      <summary>
            Cannot complete Scoreloop server operation.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.RequestCancelled">
      <summary>
            Request cancelled by new one. Common for all controllers.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.RequestServerUnavailable">
      <summary>
            Request never reached the server. Common for all controllers.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.RequestAlreadyProcessing">
      <summary>
            Request with bigger priority is already being processed by
            the controller and cannot be rejected (e.g.: payments). Common for all controllers.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.IntentionTermsAndConditionsCancelled">
      <summary>
            User cancelled the "Terms and Conditions" intention screen.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.MessageTargetMissing">
      <summary>
            Posting message without target defined (<see cref="T:Scoreloop.CoreSocial.API.IMessageController" />).
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.MessageTargetIdentifierInvalid">
      <summary>
            Posting message without a valid identifier property set on the target (<see cref="T:Scoreloop.CoreSocial.API.IMessageController" />).
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.MessageReceiverMissing">
      <summary>
            Posting message without receiver defined. (<see cref="T:Scoreloop.CoreSocial.API.IMessageController" />).
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.MessageProviderNotConnected">
      <summary>
            Attempt to post message without being connected to a social provider (<see cref="T:Scoreloop.CoreSocial.API.IMessageController" />).
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.InvalidPaymentCredential">
      <summary>
            Requested payment failed due to invalid credentials.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.IncompatiblePaymentInfo">
      <summary>
            Incompatible payment information.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.InvalidProductType">
      <summary>
            Requests can only operate on coin-packs.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.NoPreviousRange">
      <summary>
            Cannot load previous range of scores (<see cref="T:Scoreloop.CoreSocial.API.IScoresController" />).
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.NoNextRange">
      <summary>
            Cannot load next range of scores (<see cref="T:Scoreloop.CoreSocial.API.IScoresController" />).
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.OutOfRange">
      <summary>
            Cannot load specified range of scores (<see cref="T:Scoreloop.CoreSocial.API.IScoresController" />).
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.SocialProviderConnectCancelled">
      <summary>
            The attempt to connect to a social provider was canncelled.
            </summary>
    </member>
    <member name="F:Scoreloop.CoreSocial.API.StatusCode.SocialProviderNotConnected">
      <summary>
            Not connected to a social provider. 
            </summary>
    </member>
  </members>
</doc>